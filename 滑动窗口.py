"""
代码框架，我连再哪里做输出 debug 都给你写好了，以后遇到相关的问题，你就默写出来如下框架然后改三个地方就行，保证不会出 bug。
框架中两处 ... 表示的更新窗口数据的地方，在具体的题目中，你需要做的就是往这里面填代码逻辑。

基于这个框架，遇到子串/子数组相关的题目，你只需要回答以下三个问题：
1、什么时候应该移动 right 扩大窗口？窗口加入字符时，应该更新哪些数据？
2、什么时候窗口应该暂停扩大，开始移动 left 缩小窗口？从窗口移出字符时，应该更新哪些数据？
3、什么时候应该更新结果？
只要能回答这三个问题，就说明可以使用滑动窗口技巧解题。
"""

# 滑动窗口算法伪码框架
def slidingWindow(s: str):
    # 用合适的数据结构记录窗口中的数据，根据具体场景变通
    # 比如说，我想记录窗口中元素出现的次数，就用 map
    # 如果我想记录窗口中的元素和，就可以只用一个 int
    window = ...

    left, right = 0, 0
    while right < len(s):
        # c 是将移入窗口的字符
        c = s[right]
        window.add(c)
        # 增大窗口
        right += 1
        # 进行窗口内数据的一系列更新
        ...

        # *** debug 输出的位置 ***
        # 注意在最终的解法代码中不要 print
        # 因为 IO 操作很耗时，可能导致超时
        # print(f"window: [{left}, {right})")
        # ***********************

        # 判断左侧窗口是否要收缩
        while left < right and window needs shrink:
            # d 是将移出窗口的字符
            d = s[left]
            window.remove(d)
            # 缩小窗口
            left += 1
            # 进行窗口内数据的一系列更新
            ...

"""
初始化 left = right = 0，把索引左闭右开区间 [left, right) 称为一个「窗口」。
注意：
这里也是用的[left, right)，左闭右开
    * 只要让 right 向右移动（扩大）一位，区间 [0, 1) 就包含一个元素 0 了。
    * 如果你设置为两端都开的区间，那么让 right 向右移动一位后开区间 (0, 1) 仍然没有元素
    * 如果你设置为两端都闭的区间，那么初始区间 [0, 0] 就包含了一个元素。
"""



# 76. 最小覆盖子串 | 力扣 | LeetCode |  🔴
"""
2、我们先不断地增加 right 指针扩大窗口 [left, right)，
    直到窗口中的字符串符合要求（包含了 T 中的所有字符）。
3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right)，
    直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。
4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。
这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解，也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减
"""
def slidingWindow(s: str):
    window = ...
    left, right = 0, 0
    while right < len(s):
        ####################
        c = s[right]
        window.add(c)  #相同
        right += 1
        ####################
              #注意这里↓
              #左开右闭
        while left < right and window needs shrink:
            ####################
            d = s[left]
            window.remove(d) #相同
            left += 1
            ####################
            # 进行窗口内数据的一系列更新
            


