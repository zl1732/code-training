<!DOCTYPE html>
<!-- saved from url=(0185)https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89 -->
<html lang="zh-CN" data-theme="light"><plasmo-csui><template shadowrootmode="open"><div id="plasmo-shadow-container" style="z-index: 2147483647; position: relative;"><div id="plasmo-overlay-0" class="plasmo-csui-container" style="display: flex; position: absolute; top: 0px; left: 0px;"></div></div></template></plasmo-csui><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style data-vc-order="prepend" vc-icon-key="@ant-design-vue-icons">
.anticon {
  display: inline-block;
  color: inherit;
  font-style: normal;
  line-height: 0;
  text-align: center;
  text-transform: none;
  vertical-align: -0.125em;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.anticon > * {
  line-height: 1;
}

.anticon svg {
  display: inline-block;
}

.anticon::before {
  display: none;
}

.anticon .anticon-icon {
  display: block;
}

.anticon[tabindex] {
  cursor: pointer;
}

.anticon-spin::before,
.anticon-spin {
  display: inline-block;
  -webkit-animation: loadingCircle 1s infinite linear;
  animation: loadingCircle 1s infinite linear;
}

@-webkit-keyframes loadingCircle {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes loadingCircle {
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
</style><style data-vc-order="prependQueue" data-css-hash="1rruxmd" data-token-hash="mmblq1">.anticon{display:inline-flex;align-items:center;color:inherit;font-style:normal;line-height:0;text-align:center;text-transform:none;vertical-align:-0.125em;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;}.anticon >*{line-height:1;}.anticon svg{display:inline-block;}.anticon .anticon .anticon-icon{display:block;}</style><style data-vc-order="prependQueue" data-css-hash="1byatnd" data-token-hash="mmblq1">:where(.css-1p3hq3p) a{color:#1677ff;text-decoration:none;background-color:transparent;outline:none;cursor:pointer;transition:color 0.3s;-webkit-text-decoration-skip:objects;}:where(.css-1p3hq3p) a:hover{color:#69b1ff;}:where(.css-1p3hq3p) a:active{color:#0958d9;}:where(.css-1p3hq3p) a:active,:where(.css-1p3hq3p) a:hover{text-decoration:none;outline:0;}:where(.css-1p3hq3p) a:focus{text-decoration:none;outline:0;}:where(.css-1p3hq3p) a[disabled]{color:rgba(0, 0, 0, 0.25);cursor:not-allowed;}</style><style data-vc-order="prependQueue" data-css-hash="xsrd2w" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-empty"],:where(.css-1p3hq3p)[class*=" ant-empty"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-empty"]::before,:where(.css-1p3hq3p)[class*=" ant-empty"]::before,:where(.css-1p3hq3p)[class^="ant-empty"]::after,:where(.css-1p3hq3p)[class*=" ant-empty"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-empty"] [class^="ant-empty"],:where(.css-1p3hq3p)[class*=" ant-empty"] [class^="ant-empty"],:where(.css-1p3hq3p)[class^="ant-empty"] [class*=" ant-empty"],:where(.css-1p3hq3p)[class*=" ant-empty"] [class*=" ant-empty"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-empty"] [class^="ant-empty"]::before,:where(.css-1p3hq3p)[class*=" ant-empty"] [class^="ant-empty"]::before,:where(.css-1p3hq3p)[class^="ant-empty"] [class*=" ant-empty"]::before,:where(.css-1p3hq3p)[class*=" ant-empty"] [class*=" ant-empty"]::before,:where(.css-1p3hq3p)[class^="ant-empty"] [class^="ant-empty"]::after,:where(.css-1p3hq3p)[class*=" ant-empty"] [class^="ant-empty"]::after,:where(.css-1p3hq3p)[class^="ant-empty"] [class*=" ant-empty"]::after,:where(.css-1p3hq3p)[class*=" ant-empty"] [class*=" ant-empty"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-empty{margin-inline:8px;font-size:14px;line-height:1.5714285714285714;text-align:center;}:where(.css-1p3hq3p).ant-empty .ant-empty-image{height:100px;margin-bottom:8px;opacity:1;}:where(.css-1p3hq3p).ant-empty .ant-empty-image img{height:100%;}:where(.css-1p3hq3p).ant-empty .ant-empty-image svg{height:100%;margin:auto;}:where(.css-1p3hq3p).ant-empty .ant-empty-footer{margin-top:16px;}:where(.css-1p3hq3p).ant-empty-normal{margin-block:32px;color:rgba(0, 0, 0, 0.25);}:where(.css-1p3hq3p).ant-empty-normal .ant-empty-image{height:40px;}:where(.css-1p3hq3p).ant-empty-small{margin-block:8px;color:rgba(0, 0, 0, 0.25);}:where(.css-1p3hq3p).ant-empty-small .ant-empty-image{height:35px;}</style><style data-vc-order="prependQueue" data-css-hash="1i1fagx" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-btn"],:where(.css-1p3hq3p)[class*=" ant-btn"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-btn"]::before,:where(.css-1p3hq3p)[class*=" ant-btn"]::before,:where(.css-1p3hq3p)[class^="ant-btn"]::after,:where(.css-1p3hq3p)[class*=" ant-btn"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-btn"] [class^="ant-btn"],:where(.css-1p3hq3p)[class*=" ant-btn"] [class^="ant-btn"],:where(.css-1p3hq3p)[class^="ant-btn"] [class*=" ant-btn"],:where(.css-1p3hq3p)[class*=" ant-btn"] [class*=" ant-btn"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-btn"] [class^="ant-btn"]::before,:where(.css-1p3hq3p)[class*=" ant-btn"] [class^="ant-btn"]::before,:where(.css-1p3hq3p)[class^="ant-btn"] [class*=" ant-btn"]::before,:where(.css-1p3hq3p)[class*=" ant-btn"] [class*=" ant-btn"]::before,:where(.css-1p3hq3p)[class^="ant-btn"] [class^="ant-btn"]::after,:where(.css-1p3hq3p)[class*=" ant-btn"] [class^="ant-btn"]::after,:where(.css-1p3hq3p)[class^="ant-btn"] [class*=" ant-btn"]::after,:where(.css-1p3hq3p)[class*=" ant-btn"] [class*=" ant-btn"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-btn{outline:none;position:relative;display:inline-block;font-weight:400;white-space:nowrap;text-align:center;background-image:none;background-color:transparent;border:1px solid transparent;cursor:pointer;transition:all 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);user-select:none;touch-action:manipulation;line-height:1.5714285714285714;color:rgba(0, 0, 0, 0.88);}:where(.css-1p3hq3p).ant-btn >span{display:inline-block;}:where(.css-1p3hq3p).ant-btn >.anticon+span,:where(.css-1p3hq3p).ant-btn >span+.anticon{margin-inline-start:8px;}:where(.css-1p3hq3p).ant-btn >a{color:currentColor;}:where(.css-1p3hq3p).ant-btn:not(:disabled):focus-visible{outline:2px solid #91caff;outline-offset:1px;transition:outline-offset 0s,outline 0s;}:where(.css-1p3hq3p).ant-btn-icon-only.ant-btn-compact-item{flex:none;}:where(.css-1p3hq3p).ant-btn-compact-item.ant-btn-primary:not([disabled])+.ant-btn-compact-item.ant-btn-primary:not([disabled]){position:relative;}:where(.css-1p3hq3p).ant-btn-compact-item.ant-btn-primary:not([disabled])+.ant-btn-compact-item.ant-btn-primary:not([disabled]):before{position:absolute;top:-1px;inset-inline-start:-1px;display:inline-block;width:1px;height:calc(100% + 2px);background-color:#4096ff;content:"";}:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled])+.ant-btn-compact-vertical-item.ant-btn-primary:not([disabled]){position:relative;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-primary:not([disabled])+.ant-btn-compact-vertical-item.ant-btn-primary:not([disabled]):before{position:absolute;top:-1px;inset-inline-start:-1px;display:inline-block;width:calc(100% + 2px);height:1px;background-color:#4096ff;content:"";}:where(.css-1p3hq3p).ant-btn.ant-btn-sm{font-size:14px;height:24px;padding:0px 7px;border-radius:4px;}:where(.css-1p3hq3p).ant-btn.ant-btn-sm.ant-btn-icon-only{width:24px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1p3hq3p).ant-btn.ant-btn-sm.ant-btn-icon-only.ant-btn-round{width:auto;}:where(.css-1p3hq3p).ant-btn.ant-btn-sm.ant-btn-icon-only >span{transform:scale(1.143);}:where(.css-1p3hq3p).ant-btn.ant-btn-sm.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1p3hq3p).ant-btn.ant-btn-sm .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1p3hq3p).ant-btn.ant-btn-sm:not(.ant-btn-icon-only) .ant-btn-loading-icon>.anticon{margin-inline-end:8px;}:where(.css-1p3hq3p).ant-btn.ant-btn-circle.ant-btn-sm{min-width:24px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1p3hq3p).ant-btn.ant-btn-round.ant-btn-sm{border-radius:24px;padding-inline-start:12px;padding-inline-end:12px;}:where(.css-1p3hq3p).ant-btn{font-size:14px;height:32px;padding:4px 15px;border-radius:6px;}:where(.css-1p3hq3p).ant-btn.ant-btn-icon-only{width:32px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1p3hq3p).ant-btn.ant-btn-icon-only.ant-btn-round{width:auto;}:where(.css-1p3hq3p).ant-btn.ant-btn-icon-only >span{transform:scale(1.143);}:where(.css-1p3hq3p).ant-btn.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1p3hq3p).ant-btn .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1p3hq3p).ant-btn:not(.ant-btn-icon-only) .ant-btn-loading-icon>.anticon{margin-inline-end:8px;}:where(.css-1p3hq3p).ant-btn.ant-btn-circle{min-width:32px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1p3hq3p).ant-btn.ant-btn-round{border-radius:32px;padding-inline-start:16px;padding-inline-end:16px;}:where(.css-1p3hq3p).ant-btn.ant-btn-lg{font-size:16px;height:40px;padding:6.428571428571429px 15px;border-radius:8px;}:where(.css-1p3hq3p).ant-btn.ant-btn-lg.ant-btn-icon-only{width:40px;padding-inline-start:0;padding-inline-end:0;}:where(.css-1p3hq3p).ant-btn.ant-btn-lg.ant-btn-icon-only.ant-btn-round{width:auto;}:where(.css-1p3hq3p).ant-btn.ant-btn-lg.ant-btn-icon-only >span{transform:scale(1.143);}:where(.css-1p3hq3p).ant-btn.ant-btn-lg.ant-btn-loading{opacity:0.65;cursor:default;}:where(.css-1p3hq3p).ant-btn.ant-btn-lg .ant-btn-loading-icon{transition:width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1),opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);}:where(.css-1p3hq3p).ant-btn.ant-btn-lg:not(.ant-btn-icon-only) .ant-btn-loading-icon>.anticon{margin-inline-end:8px;}:where(.css-1p3hq3p).ant-btn.ant-btn-circle.ant-btn-lg{min-width:40px;padding-inline-start:0;padding-inline-end:0;border-radius:50%;}:where(.css-1p3hq3p).ant-btn.ant-btn-round.ant-btn-lg{border-radius:40px;padding-inline-start:20px;padding-inline-end:20px;}:where(.css-1p3hq3p).ant-btn.ant-btn-block{width:100%;}:where(.css-1p3hq3p).ant-btn-default{background-color:#ffffff;border-color:#d9d9d9;box-shadow:0 2px 0 rgba(0, 0, 0, 0.02);}:where(.css-1p3hq3p).ant-btn-default:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-default:not(:disabled):hover{color:#4096ff;border-color:#4096ff;}:where(.css-1p3hq3p).ant-btn-default:not(:disabled):active{color:#0958d9;border-color:#0958d9;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-background-ghost{color:#ffffff;background-color:transparent;border-color:#ffffff;box-shadow:none;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous{color:#ff4d4f;border-color:#ff4d4f;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;border-color:#ffa39e;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous:not(:disabled):active{color:#d9363e;border-color:#d9363e;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1p3hq3p).ant-btn-default.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-primary{color:#fff;background-color:#1677ff;box-shadow:0 2px 0 rgba(5, 145, 255, 0.1);}:where(.css-1p3hq3p).ant-btn-primary:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-primary:not(:disabled):hover{color:#fff;background-color:#4096ff;}:where(.css-1p3hq3p).ant-btn-primary:not(:disabled):active{color:#fff;background-color:#0958d9;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-background-ghost{color:#1677ff;background-color:transparent;border-color:#1677ff;box-shadow:none;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;color:#4096ff;border-color:#4096ff;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;color:#0958d9;border-color:#0958d9;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous{background-color:#ff4d4f;box-shadow:0 2px 0 rgba(255, 38, 5, 0.06);}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous:not(:disabled):hover{background-color:#ff7875;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous:not(:disabled):active{background-color:#d9363e;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;color:#ff7875;border-color:#ff7875;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;color:#d9363e;border-color:#d9363e;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1p3hq3p).ant-btn-primary.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-dashed{background-color:#ffffff;border-color:#d9d9d9;box-shadow:0 2px 0 rgba(0, 0, 0, 0.02);border-style:dashed;}:where(.css-1p3hq3p).ant-btn-dashed:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-dashed:not(:disabled):hover{color:#4096ff;border-color:#4096ff;}:where(.css-1p3hq3p).ant-btn-dashed:not(:disabled):active{color:#0958d9;border-color:#0958d9;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-background-ghost{color:#ffffff;background-color:transparent;border-color:#ffffff;box-shadow:none;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous{color:#ff4d4f;border-color:#ff4d4f;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;border-color:#ffa39e;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous:not(:disabled):active{color:#d9363e;border-color:#d9363e;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost{color:#ff4d4f;background-color:transparent;border-color:#ff4d4f;box-shadow:none;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):hover{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:not(:disabled):active{background-color:transparent;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous.ant-btn-background-ghost:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);border-color:#d9d9d9;}:where(.css-1p3hq3p).ant-btn-dashed.ant-btn-dangerous:disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-link{color:#1677ff;}:where(.css-1p3hq3p).ant-btn-link:not(:disabled):hover{color:#69b1ff;}:where(.css-1p3hq3p).ant-btn-link:not(:disabled):active{color:#0958d9;}:where(.css-1p3hq3p).ant-btn-link:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1p3hq3p).ant-btn-link.ant-btn-dangerous{color:#ff4d4f;}:where(.css-1p3hq3p).ant-btn-link.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;}:where(.css-1p3hq3p).ant-btn-link.ant-btn-dangerous:not(:disabled):active{color:#d9363e;}:where(.css-1p3hq3p).ant-btn-link.ant-btn-dangerous:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1p3hq3p).ant-btn-text:not(:disabled):hover{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.06);}:where(.css-1p3hq3p).ant-btn-text:not(:disabled):active{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.15);}:where(.css-1p3hq3p).ant-btn-text:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1p3hq3p).ant-btn-text.ant-btn-dangerous{color:#ff4d4f;}:where(.css-1p3hq3p).ant-btn-text.ant-btn-dangerous:disabled{cursor:not-allowed;color:rgba(0, 0, 0, 0.25);}:where(.css-1p3hq3p).ant-btn-text.ant-btn-dangerous:not(:disabled):hover{color:#ff7875;background-color:#fff2f0;}:where(.css-1p3hq3p).ant-btn-text.ant-btn-dangerous:not(:disabled):active{color:#ff7875;background-color:#fff2f0;}:where(.css-1p3hq3p).ant-btn-disabled{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-disabled.ant-btn:hover{cursor:not-allowed;border-color:#d9d9d9;color:rgba(0, 0, 0, 0.25);background-color:rgba(0, 0, 0, 0.04);box-shadow:none;}:where(.css-1p3hq3p).ant-btn-group{position:relative;display:inline-flex;}:where(.css-1p3hq3p).ant-btn-group >span:not(:last-child),:where(.css-1p3hq3p).ant-btn-group >.ant-btn:not(:last-child),:where(.css-1p3hq3p).ant-btn-group >span:not(:last-child)>.ant-btn,:where(.css-1p3hq3p).ant-btn-group >.ant-btn:not(:last-child)>.ant-btn{border-start-end-radius:0;border-end-end-radius:0;}:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child),:where(.css-1p3hq3p).ant-btn-group >.ant-btn:not(:first-child){margin-inline-start:-1px;}:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child),:where(.css-1p3hq3p).ant-btn-group >.ant-btn:not(:first-child),:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child)>.ant-btn,:where(.css-1p3hq3p).ant-btn-group >.ant-btn:not(:first-child)>.ant-btn{border-start-start-radius:0;border-end-start-radius:0;}:where(.css-1p3hq3p).ant-btn-group .ant-btn{position:relative;z-index:1;}:where(.css-1p3hq3p).ant-btn-group .ant-btn:hover,:where(.css-1p3hq3p).ant-btn-group .ant-btn:focus,:where(.css-1p3hq3p).ant-btn-group .ant-btn:active{z-index:2;}:where(.css-1p3hq3p).ant-btn-group .ant-btn[disabled]{z-index:0;}:where(.css-1p3hq3p).ant-btn-group .ant-btn-icon-only{font-size:14px;}:where(.css-1p3hq3p).ant-btn-group >span:not(:last-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-primary:not(:last-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >span:not(:last-child)>.ant-btn-primary:not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-primary:not(:last-child)>.ant-btn-primary:not(:disabled){border-inline-end-color:#4096ff;}:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-primary:not(:first-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child)>.ant-btn-primary:not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-primary:not(:first-child)>.ant-btn-primary:not(:disabled){border-inline-start-color:#4096ff;}:where(.css-1p3hq3p).ant-btn-group >span:not(:last-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-danger:not(:last-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >span:not(:last-child)>.ant-btn-danger:not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-danger:not(:last-child)>.ant-btn-danger:not(:disabled){border-inline-end-color:#ff7875;}:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-danger:not(:first-child):not(:disabled),:where(.css-1p3hq3p).ant-btn-group >span:not(:first-child)>.ant-btn-danger:not(:disabled),:where(.css-1p3hq3p).ant-btn-group >.ant-btn-danger:not(:first-child)>.ant-btn-danger:not(:disabled){border-inline-start-color:#ff7875;}:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-last-item){margin-inline-end:-1px;}:where(.css-1p3hq3p).ant-btn-compact-item:hover,:where(.css-1p3hq3p).ant-btn-compact-item:active{z-index:2;}:where(.css-1p3hq3p).ant-btn-compact-item[disabled]{z-index:0;}:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-first-item):not(.ant-btn-compact-last-item){border-radius:0;}:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-last-item).ant-btn-compact-first-item,:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-last-item).ant-btn-compact-first-item.ant-btn-sm,:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-last-item).ant-btn-compact-first-item.ant-btn-lg{border-start-end-radius:0;border-end-end-radius:0;}:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-first-item).ant-btn-compact-last-item,:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-first-item).ant-btn-compact-last-item.ant-btn-sm,:where(.css-1p3hq3p).ant-btn-compact-item:not(.ant-btn-compact-first-item).ant-btn-compact-last-item.ant-btn-lg{border-start-start-radius:0;border-end-start-radius:0;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item:not(.ant-btn-compact-vertical-last-item){margin-bottom:-1px;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item:hover,:where(.css-1p3hq3p).ant-btn-compact-vertical-item:focus,:where(.css-1p3hq3p).ant-btn-compact-vertical-item:active{z-index:2;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item[disabled]{z-index:0;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item:not(.ant-btn-compact-vertical-first-item):not(.ant-btn-compact-vertical-last-item){border-radius:0;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-compact-vertical-first-item:not(.ant-btn-compact-vertical-last-item),:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-compact-vertical-first-item:not(.ant-btn-compact-vertical-last-item).ant-btn-sm,:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-compact-vertical-first-item:not(.ant-btn-compact-vertical-last-item).ant-btn-lg{border-end-end-radius:0;border-end-start-radius:0;}:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-compact-vertical-last-item:not(.ant-btn-compact-vertical-first-item),:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-compact-vertical-last-item:not(.ant-btn-compact-vertical-first-item).ant-btn-sm,:where(.css-1p3hq3p).ant-btn-compact-vertical-item.ant-btn-compact-vertical-last-item:not(.ant-btn-compact-vertical-first-item).ant-btn-lg{border-start-start-radius:0;border-start-end-radius:0;}</style><style data-vc-order="prependQueue" data-css-hash="1s4l9" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-wave"],:where(.css-1p3hq3p)[class*=" ant-wave"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-wave"]::before,:where(.css-1p3hq3p)[class*=" ant-wave"]::before,:where(.css-1p3hq3p)[class^="ant-wave"]::after,:where(.css-1p3hq3p)[class*=" ant-wave"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-wave"] [class^="ant-wave"],:where(.css-1p3hq3p)[class*=" ant-wave"] [class^="ant-wave"],:where(.css-1p3hq3p)[class^="ant-wave"] [class*=" ant-wave"],:where(.css-1p3hq3p)[class*=" ant-wave"] [class*=" ant-wave"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-wave"] [class^="ant-wave"]::before,:where(.css-1p3hq3p)[class*=" ant-wave"] [class^="ant-wave"]::before,:where(.css-1p3hq3p)[class^="ant-wave"] [class*=" ant-wave"]::before,:where(.css-1p3hq3p)[class*=" ant-wave"] [class*=" ant-wave"]::before,:where(.css-1p3hq3p)[class^="ant-wave"] [class^="ant-wave"]::after,:where(.css-1p3hq3p)[class*=" ant-wave"] [class^="ant-wave"]::after,:where(.css-1p3hq3p)[class^="ant-wave"] [class*=" ant-wave"]::after,:where(.css-1p3hq3p)[class*=" ant-wave"] [class*=" ant-wave"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-wave{position:absolute;background:transparent;pointer-events:none;box-sizing:border-box;color:var(--wave-color, #1677ff);box-shadow:0 0 0 0 currentcolor;opacity:0.2;}:where(.css-1p3hq3p).ant-wave.wave-motion-appear{transition:box-shadow 0.4s cubic-bezier(0.08, 0.82, 0.17, 1),opacity 2s cubic-bezier(0.08, 0.82, 0.17, 1);}:where(.css-1p3hq3p).ant-wave.wave-motion-appear-active{box-shadow:0 0 0 6px currentcolor;opacity:0;}</style><style data-vc-order="prependQueue" data-css-hash="vy9nyp" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-spin"],:where(.css-1p3hq3p)[class*=" ant-spin"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-spin"]::before,:where(.css-1p3hq3p)[class*=" ant-spin"]::before,:where(.css-1p3hq3p)[class^="ant-spin"]::after,:where(.css-1p3hq3p)[class*=" ant-spin"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-spin"] [class^="ant-spin"],:where(.css-1p3hq3p)[class*=" ant-spin"] [class^="ant-spin"],:where(.css-1p3hq3p)[class^="ant-spin"] [class*=" ant-spin"],:where(.css-1p3hq3p)[class*=" ant-spin"] [class*=" ant-spin"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-spin"] [class^="ant-spin"]::before,:where(.css-1p3hq3p)[class*=" ant-spin"] [class^="ant-spin"]::before,:where(.css-1p3hq3p)[class^="ant-spin"] [class*=" ant-spin"]::before,:where(.css-1p3hq3p)[class*=" ant-spin"] [class*=" ant-spin"]::before,:where(.css-1p3hq3p)[class^="ant-spin"] [class^="ant-spin"]::after,:where(.css-1p3hq3p)[class*=" ant-spin"] [class^="ant-spin"]::after,:where(.css-1p3hq3p)[class^="ant-spin"] [class*=" ant-spin"]::after,:where(.css-1p3hq3p)[class*=" ant-spin"] [class*=" ant-spin"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-spin{box-sizing:border-box;margin:0;padding:0;color:#1677ff;font-size:14px;line-height:1.5714285714285714;list-style:none;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';position:absolute;display:none;text-align:center;vertical-align:middle;opacity:0;transition:transform 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);}:where(.css-1p3hq3p).ant-spin-spinning{position:static;display:inline-block;opacity:1;}:where(.css-1p3hq3p).ant-spin-nested-loading{position:relative;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin{position:absolute;top:0;inset-inline-start:0;z-index:4;display:block;width:100%;height:100%;max-height:400px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin .ant-spin-dot{position:absolute;top:50%;inset-inline-start:50%;margin:-10px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin .ant-spin-text{position:absolute;top:50%;width:100%;padding-top:5px;text-shadow:0 1px 2px #ffffff;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin.ant-spin-show-text .ant-spin-dot{margin-top:-20px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin-sm .ant-spin-dot{margin:-7px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin-sm .ant-spin-text{padding-top:2px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin-sm.ant-spin-show-text .ant-spin-dot{margin-top:-17px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin-lg .ant-spin-dot{margin:-16px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin-lg .ant-spin-text{padding-top:11px;}:where(.css-1p3hq3p).ant-spin-nested-loading >div>.ant-spin-lg.ant-spin-show-text .ant-spin-dot{margin-top:-26px;}:where(.css-1p3hq3p).ant-spin-nested-loading .ant-spin-container{position:relative;transition:opacity 0.3s;}:where(.css-1p3hq3p).ant-spin-nested-loading .ant-spin-container::after{position:absolute;top:0;inset-inline-end:0;bottom:0;inset-inline-start:0;z-index:10;width:100%;height:100%;background:#ffffff;opacity:0;transition:all 0.3s;content:"";pointer-events:none;}:where(.css-1p3hq3p).ant-spin-nested-loading .ant-spin-blur{clear:both;opacity:0.5;user-select:none;pointer-events:none;}:where(.css-1p3hq3p).ant-spin-nested-loading .ant-spin-blur::after{opacity:0.4;pointer-events:auto;}:where(.css-1p3hq3p).ant-spin-tip{color:rgba(0, 0, 0, 0.45);}:where(.css-1p3hq3p).ant-spin .ant-spin-dot{position:relative;display:inline-block;font-size:20px;width:1em;height:1em;}:where(.css-1p3hq3p).ant-spin .ant-spin-dot-item{position:absolute;display:block;width:9px;height:9px;background-color:#1677ff;border-radius:100%;transform:scale(0.75);transform-origin:50% 50%;opacity:0.3;animation-name:css-1p3hq3p-antSpinMove;animation-duration:1s;animation-iteration-count:infinite;animation-timing-function:linear;animation-direction:alternate;}:where(.css-1p3hq3p).ant-spin .ant-spin-dot-item:nth-child(1){top:0;inset-inline-start:0;}:where(.css-1p3hq3p).ant-spin .ant-spin-dot-item:nth-child(2){top:0;inset-inline-end:0;animation-delay:0.4s;}:where(.css-1p3hq3p).ant-spin .ant-spin-dot-item:nth-child(3){inset-inline-end:0;bottom:0;animation-delay:0.8s;}:where(.css-1p3hq3p).ant-spin .ant-spin-dot-item:nth-child(4){bottom:0;inset-inline-start:0;animation-delay:1.2s;}:where(.css-1p3hq3p).ant-spin .ant-spin-dot-spin{transform:rotate(45deg);animation-name:css-1p3hq3p-antRotate;animation-duration:1.2s;animation-iteration-count:infinite;animation-timing-function:linear;}:where(.css-1p3hq3p).ant-spin-sm .ant-spin-dot{font-size:14px;}:where(.css-1p3hq3p).ant-spin-sm .ant-spin-dot i{width:6px;height:6px;}:where(.css-1p3hq3p).ant-spin-lg .ant-spin-dot{font-size:32px;}:where(.css-1p3hq3p).ant-spin-lg .ant-spin-dot i{width:14px;height:14px;}:where(.css-1p3hq3p).ant-spin.ant-spin-show-text .ant-spin-text{display:block;}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antSpinMove">@keyframes css-1p3hq3p-antSpinMove{to{opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antRotate">@keyframes css-1p3hq3p-antRotate{to{transform:rotate(405deg);}}</style><style data-vc-order="prependQueue" data-css-hash="1jyf259" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-dropdown"],:where(.css-1p3hq3p)[class*=" ant-dropdown"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-dropdown"]::before,:where(.css-1p3hq3p)[class*=" ant-dropdown"]::before,:where(.css-1p3hq3p)[class^="ant-dropdown"]::after,:where(.css-1p3hq3p)[class*=" ant-dropdown"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-dropdown"] [class^="ant-dropdown"],:where(.css-1p3hq3p)[class*=" ant-dropdown"] [class^="ant-dropdown"],:where(.css-1p3hq3p)[class^="ant-dropdown"] [class*=" ant-dropdown"],:where(.css-1p3hq3p)[class*=" ant-dropdown"] [class*=" ant-dropdown"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-dropdown"] [class^="ant-dropdown"]::before,:where(.css-1p3hq3p)[class*=" ant-dropdown"] [class^="ant-dropdown"]::before,:where(.css-1p3hq3p)[class^="ant-dropdown"] [class*=" ant-dropdown"]::before,:where(.css-1p3hq3p)[class*=" ant-dropdown"] [class*=" ant-dropdown"]::before,:where(.css-1p3hq3p)[class^="ant-dropdown"] [class^="ant-dropdown"]::after,:where(.css-1p3hq3p)[class*=" ant-dropdown"] [class^="ant-dropdown"]::after,:where(.css-1p3hq3p)[class^="ant-dropdown"] [class*=" ant-dropdown"]::after,:where(.css-1p3hq3p)[class*=" ant-dropdown"] [class*=" ant-dropdown"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-dropdown{box-sizing:border-box;margin:0;padding:0;color:rgba(0, 0, 0, 0.88);font-size:14px;line-height:1.5714285714285714;list-style:none;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';position:absolute;top:-9999px;left:-9999px;z-index:1050;display:block;}:where(.css-1p3hq3p).ant-dropdown::before{position:absolute;inset-block:-4px;z-index:-9999;opacity:0.0001;content:"";}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-wrap{position:relative;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-wrap .ant-btn>.anticon-down{font-size:12px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-wrap .anticon-down::before{transition:transform 0.2s;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-wrap-open .anticon-down::before{transform:rotate(180deg);}:where(.css-1p3hq3p).ant-dropdown-hidden,:where(.css-1p3hq3p).ant-dropdown-menu-hidden,:where(.css-1p3hq3p).ant-dropdown-menu-submenu-hidden{display:none;}:where(.css-1p3hq3p).ant-dropdown-show-arrow.ant-dropdown-placement-topLeft,:where(.css-1p3hq3p).ant-dropdown-show-arrow.ant-dropdown-placement-top,:where(.css-1p3hq3p).ant-dropdown-show-arrow.ant-dropdown-placement-topRight{padding-bottom:12px;}:where(.css-1p3hq3p).ant-dropdown-show-arrow.ant-dropdown-placement-bottomLeft,:where(.css-1p3hq3p).ant-dropdown-show-arrow.ant-dropdown-placement-bottom,:where(.css-1p3hq3p).ant-dropdown-show-arrow.ant-dropdown-placement-bottomRight{padding-top:12px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-arrow{position:absolute;z-index:1;display:block;pointer-events:none;width:16px;height:16px;overflow:hidden;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-arrow::after{content:"";position:absolute;width:8.970562748477143px;height:8.970562748477143px;bottom:0;inset-inline:0;margin:auto;border-radius:0 0 2px 0;transform:translateY(50%) rotate(-135deg);box-shadow:3px 3px 7px rgba(0, 0, 0, 0.1);z-index:0;background:transparent;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-arrow::before{position:absolute;bottom:0;inset-inline-start:0;width:16px;height:8px;background:#ffffff;clip-path:polygon(1.6568542494923806px 100%, 50% 1.6568542494923806px, 14.34314575050762px 100%, 1.6568542494923806px 100%);clip-path:path('M 0 8 A 4 4 0 0 0 2.82842712474619 6.82842712474619 L 6.585786437626905 3.0710678118654755 A 2 2 0 0 1 9.414213562373096 3.0710678118654755 L 13.17157287525381 6.82842712474619 A 4 4 0 0 0 16 8 Z');content:"";}:where(.css-1p3hq3p).ant-dropdown-placement-top>.ant-dropdown-arrow,:where(.css-1p3hq3p).ant-dropdown-placement-topLeft>.ant-dropdown-arrow,:where(.css-1p3hq3p).ant-dropdown-placement-topRight>.ant-dropdown-arrow{bottom:12px;transform:translateY(100%) rotate(180deg);}:where(.css-1p3hq3p).ant-dropdown-placement-top>.ant-dropdown-arrow{left:50%;transform:translateX(-50%) translateY(100%) rotate(180deg);}:where(.css-1p3hq3p).ant-dropdown-placement-topLeft>.ant-dropdown-arrow{left:6px;}:where(.css-1p3hq3p).ant-dropdown-placement-topRight>.ant-dropdown-arrow{right:6px;}:where(.css-1p3hq3p).ant-dropdown-placement-bottom>.ant-dropdown-arrow,:where(.css-1p3hq3p).ant-dropdown-placement-bottomLeft>.ant-dropdown-arrow,:where(.css-1p3hq3p).ant-dropdown-placement-bottomRight>.ant-dropdown-arrow{top:12px;transform:translateY(-100%);}:where(.css-1p3hq3p).ant-dropdown-placement-bottom>.ant-dropdown-arrow{left:50%;transform:translateY(-100%) translateX(-50%);}:where(.css-1p3hq3p).ant-dropdown-placement-bottomLeft>.ant-dropdown-arrow{left:6px;}:where(.css-1p3hq3p).ant-dropdown-placement-bottomRight>.ant-dropdown-arrow{right:6px;}:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-enter.ant-slide-down-enter-active.ant-dropdown-placement-bottomLeft,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-appear.ant-slide-down-appear-active.ant-dropdown-placement-bottomLeft,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-enter.ant-slide-down-enter-active.ant-dropdown-placement-bottom,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-appear.ant-slide-down-appear-active.ant-dropdown-placement-bottom,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-enter.ant-slide-down-enter-active.ant-dropdown-placement-bottomRight,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-appear.ant-slide-down-appear-active.ant-dropdown-placement-bottomRight{animation-name:css-1p3hq3p-antSlideUpIn;}:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-enter.ant-slide-up-enter-active.ant-dropdown-placement-topLeft,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-appear.ant-slide-up-appear-active.ant-dropdown-placement-topLeft,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-enter.ant-slide-up-enter-active.ant-dropdown-placement-top,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-appear.ant-slide-up-appear-active.ant-dropdown-placement-top,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-enter.ant-slide-up-enter-active.ant-dropdown-placement-topRight,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-appear.ant-slide-up-appear-active.ant-dropdown-placement-topRight{animation-name:css-1p3hq3p-antSlideDownIn;}:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-leave.ant-slide-down-leave-active.ant-dropdown-placement-bottomLeft,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-leave.ant-slide-down-leave-active.ant-dropdown-placement-bottom,:where(.css-1p3hq3p).ant-dropdown.ant-slide-down-leave.ant-slide-down-leave-active.ant-dropdown-placement-bottomRight{animation-name:css-1p3hq3p-antSlideUpOut;}:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-leave.ant-slide-up-leave-active.ant-dropdown-placement-topLeft,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-leave.ant-slide-up-leave-active.ant-dropdown-placement-top,:where(.css-1p3hq3p).ant-dropdown.ant-slide-up-leave.ant-slide-up-leave-active.ant-dropdown-placement-topRight{animation-name:css-1p3hq3p-antSlideDownOut;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu{position:relative;margin:0;}:where(.css-1p3hq3p).ant-dropdown-menu-submenu-popup{position:absolute;z-index:1050;background:transparent;box-shadow:none;transform-origin:0 0;}:where(.css-1p3hq3p).ant-dropdown-menu-submenu-popup ul,:where(.css-1p3hq3p).ant-dropdown-menu-submenu-popup li{list-style:none;}:where(.css-1p3hq3p).ant-dropdown-menu-submenu-popup ul{margin-inline:0.3em;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu{padding:4px;list-style-type:none;background-color:#ffffff;background-clip:padding-box;border-radius:8px;outline:none;box-shadow:0 6px 16px 0 rgba(0, 0, 0, 0.08),0 3px 6px -4px rgba(0, 0, 0, 0.12),0 9px 28px 8px rgba(0, 0, 0, 0.05);}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu:focus-visible,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu:focus-visible{outline:2px solid #91caff;outline-offset:1px;transition:outline-offset 0s,outline 0s;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-group-title,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-group-title{padding:5px 12px;color:rgba(0, 0, 0, 0.45);transition:all 0.2s;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item{position:relative;display:flex;align-items:center;border-radius:4px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-icon,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-icon{min-width:14px;margin-inline-end:8px;font-size:12px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-title-content,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-title-content{flex:auto;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-title-content >a,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-title-content >a{color:inherit;transition:all 0.2s;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-title-content >a:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-title-content >a:hover{color:inherit;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-title-content >a::after,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-title-content >a::after{position:absolute;inset:0;content:"";}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title{clear:both;margin:0;padding:5px 12px;color:rgba(0, 0, 0, 0.88);font-weight:normal;font-size:14px;line-height:1.5714285714285714;cursor:pointer;transition:all 0.2s;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item:hover,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title:hover,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-active,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-active,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-active,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-active{background-color:rgba(0, 0, 0, 0.04);}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item:focus-visible,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item:focus-visible,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title:focus-visible,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title:focus-visible{outline:2px solid #91caff;outline-offset:1px;transition:outline-offset 0s,outline 0s;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-selected,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-selected,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-selected,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-selected{color:#1677ff;background-color:#e6f4ff;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-selected:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-selected:hover,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-selected:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-selected:hover,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-selected-active,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-selected-active,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-selected-active,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-selected-active{background-color:#bae0ff;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-disabled,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-disabled,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-disabled,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-disabled{color:rgba(0, 0, 0, 0.25);cursor:not-allowed;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-disabled:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-disabled:hover,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-disabled:hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-disabled:hover{color:rgba(0, 0, 0, 0.25);background-color:#ffffff;cursor:not-allowed;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-disabled a,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-disabled a,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-disabled a,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-disabled a{pointer-events:none;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-divider,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-divider,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title-divider,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title-divider{height:1px;margin:4px 0;overflow:hidden;line-height:0;background-color:rgba(5, 5, 5, 0.06);}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item .ant-dropdown-menu-submenu-expand-icon,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item .ant-dropdown-menu-submenu-expand-icon,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-expand-icon,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-expand-icon{position:absolute;inset-inline-end:8px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item .ant-dropdown-menu-submenu-expand-icon .ant-dropdown-menu-submenu-arrow-icon,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item .ant-dropdown-menu-submenu-expand-icon .ant-dropdown-menu-submenu-arrow-icon,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-expand-icon .ant-dropdown-menu-submenu-arrow-icon,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-expand-icon .ant-dropdown-menu-submenu-arrow-icon{margin-inline-end:0!important;color:rgba(0, 0, 0, 0.45);font-size:12px;font-style:normal;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item-group-list,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item-group-list{margin:0 8px;padding:0;list-style:none;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-title,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-title{padding-inline-end:24px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-vertical,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-vertical{position:relative;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow-icon,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title .ant-dropdown-menu-submenu-arrow-icon{color:rgba(0, 0, 0, 0.25);background-color:#ffffff;cursor:not-allowed;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-submenu-selected .ant-dropdown-menu-submenu-title,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-submenu-selected .ant-dropdown-menu-submenu-title{color:#1677ff;}:where(.css-1p3hq3p).ant-slide-up-enter,:where(.css-1p3hq3p).ant-slide-up-appear{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-slide-up-leave{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-slide-up-enter.ant-slide-up-enter-active,:where(.css-1p3hq3p).ant-slide-up-appear.ant-slide-up-appear-active{animation-name:css-1p3hq3p-antSlideUpIn;animation-play-state:running;}:where(.css-1p3hq3p).ant-slide-up-leave.ant-slide-up-leave-active{animation-name:css-1p3hq3p-antSlideUpOut;animation-play-state:running;pointer-events:none;}:where(.css-1p3hq3p).ant-slide-up-enter,:where(.css-1p3hq3p).ant-slide-up-appear{transform:scale(0);transform-origin:0% 0%;opacity:0;animation-timing-function:cubic-bezier(0.23, 1, 0.32, 1);}:where(.css-1p3hq3p).ant-slide-up-leave{animation-timing-function:cubic-bezier(0.755, 0.05, 0.855, 0.06);}:where(.css-1p3hq3p).ant-slide-down-enter,:where(.css-1p3hq3p).ant-slide-down-appear{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-slide-down-leave{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-slide-down-enter.ant-slide-down-enter-active,:where(.css-1p3hq3p).ant-slide-down-appear.ant-slide-down-appear-active{animation-name:css-1p3hq3p-antSlideDownIn;animation-play-state:running;}:where(.css-1p3hq3p).ant-slide-down-leave.ant-slide-down-leave-active{animation-name:css-1p3hq3p-antSlideDownOut;animation-play-state:running;pointer-events:none;}:where(.css-1p3hq3p).ant-slide-down-enter,:where(.css-1p3hq3p).ant-slide-down-appear{transform:scale(0);transform-origin:0% 0%;opacity:0;animation-timing-function:cubic-bezier(0.23, 1, 0.32, 1);}:where(.css-1p3hq3p).ant-slide-down-leave{animation-timing-function:cubic-bezier(0.755, 0.05, 0.855, 0.06);}:where(.css-1p3hq3p).ant-move-up-enter,:where(.css-1p3hq3p).ant-move-up-appear{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-move-up-leave{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-move-up-enter.ant-move-up-enter-active,:where(.css-1p3hq3p).ant-move-up-appear.ant-move-up-appear-active{animation-name:css-1p3hq3p-antMoveUpIn;animation-play-state:running;}:where(.css-1p3hq3p).ant-move-up-leave.ant-move-up-leave-active{animation-name:css-1p3hq3p-antMoveUpOut;animation-play-state:running;pointer-events:none;}:where(.css-1p3hq3p).ant-move-up-enter,:where(.css-1p3hq3p).ant-move-up-appear{opacity:0;animation-timing-function:cubic-bezier(0.08, 0.82, 0.17, 1);}:where(.css-1p3hq3p).ant-move-up-leave{animation-timing-function:cubic-bezier(0.78, 0.14, 0.15, 0.86);}:where(.css-1p3hq3p).ant-move-down-enter,:where(.css-1p3hq3p).ant-move-down-appear{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-move-down-leave{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-move-down-enter.ant-move-down-enter-active,:where(.css-1p3hq3p).ant-move-down-appear.ant-move-down-appear-active{animation-name:css-1p3hq3p-antMoveDownIn;animation-play-state:running;}:where(.css-1p3hq3p).ant-move-down-leave.ant-move-down-leave-active{animation-name:css-1p3hq3p-antMoveDownOut;animation-play-state:running;pointer-events:none;}:where(.css-1p3hq3p).ant-move-down-enter,:where(.css-1p3hq3p).ant-move-down-appear{opacity:0;animation-timing-function:cubic-bezier(0.08, 0.82, 0.17, 1);}:where(.css-1p3hq3p).ant-move-down-leave{animation-timing-function:cubic-bezier(0.78, 0.14, 0.15, 0.86);}:where(.css-1p3hq3p).ant-zoom-big-enter,:where(.css-1p3hq3p).ant-zoom-big-appear{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-zoom-big-leave{animation-duration:0.2s;animation-fill-mode:both;animation-play-state:paused;}:where(.css-1p3hq3p).ant-zoom-big-enter.ant-zoom-big-enter-active,:where(.css-1p3hq3p).ant-zoom-big-appear.ant-zoom-big-appear-active{animation-name:css-1p3hq3p-antZoomBigIn;animation-play-state:running;}:where(.css-1p3hq3p).ant-zoom-big-leave.ant-zoom-big-leave-active{animation-name:css-1p3hq3p-antZoomBigOut;animation-play-state:running;pointer-events:none;}:where(.css-1p3hq3p).ant-zoom-big-enter,:where(.css-1p3hq3p).ant-zoom-big-appear{transform:scale(0);opacity:0;animation-timing-function:cubic-bezier(0.08, 0.82, 0.17, 1);}:where(.css-1p3hq3p).ant-zoom-big-enter-prepare,:where(.css-1p3hq3p).ant-zoom-big-appear-prepare{transform:none;}:where(.css-1p3hq3p).ant-zoom-big-leave{animation-timing-function:cubic-bezier(0.78, 0.14, 0.15, 0.86);}:where(.css-1p3hq3p).ant-dropdown-button{white-space:nowrap;}:where(.css-1p3hq3p).ant-dropdown-button.ant-btn-group>.ant-btn-loading,:where(.css-1p3hq3p).ant-dropdown-button.ant-btn-group>.ant-btn-loading+.ant-btn{cursor:default;pointer-events:none;opacity:0.65;}:where(.css-1p3hq3p).ant-dropdown-button.ant-btn-group>.ant-btn:last-child:not(:first-child):not(.ant-btn-icon-only){padding-inline:8px;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item.ant-dropdown-menu-item-danger:not(.ant-dropdown-menu-item-disabled),:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item.ant-dropdown-menu-item-danger:not(.ant-dropdown-menu-item-disabled){color:#ff4d4f;}:where(.css-1p3hq3p).ant-dropdown .ant-dropdown-menu .ant-dropdown-menu-item.ant-dropdown-menu-item-danger:not(.ant-dropdown-menu-item-disabled):hover,:where(.css-1p3hq3p).ant-dropdown-menu-submenu .ant-dropdown-menu .ant-dropdown-menu-item.ant-dropdown-menu-item-danger:not(.ant-dropdown-menu-item-disabled):hover{color:#fff;background-color:#ff4d4f;}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antSlideUpIn">@keyframes css-1p3hq3p-antSlideUpIn{0%{transform:scaleY(0.8);transform-origin:0% 0%;opacity:0;}100%{transform:scaleY(1);transform-origin:0% 0%;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antSlideDownIn">@keyframes css-1p3hq3p-antSlideDownIn{0%{transform:scaleY(0.8);transform-origin:100% 100%;opacity:0;}100%{transform:scaleY(1);transform-origin:100% 100%;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antSlideUpOut">@keyframes css-1p3hq3p-antSlideUpOut{0%{transform:scaleY(1);transform-origin:0% 0%;opacity:1;}100%{transform:scaleY(0.8);transform-origin:0% 0%;opacity:0;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antSlideDownOut">@keyframes css-1p3hq3p-antSlideDownOut{0%{transform:scaleY(1);transform-origin:100% 100%;opacity:1;}100%{transform:scaleY(0.8);transform-origin:100% 100%;opacity:0;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antMoveUpIn">@keyframes css-1p3hq3p-antMoveUpIn{0%{transform:translate3d(0, -100%, 0);transform-origin:0 0;opacity:0;}100%{transform:translate3d(0, 0, 0);transform-origin:0 0;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antMoveUpOut">@keyframes css-1p3hq3p-antMoveUpOut{0%{transform:translate3d(0, 0, 0);transform-origin:0 0;opacity:1;}100%{transform:translate3d(0, -100%, 0);transform-origin:0 0;opacity:0;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antMoveDownIn">@keyframes css-1p3hq3p-antMoveDownIn{0%{transform:translate3d(0, 100%, 0);transform-origin:0 0;opacity:0;}100%{transform:translate3d(0, 0, 0);transform-origin:0 0;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antMoveDownOut">@keyframes css-1p3hq3p-antMoveDownOut{0%{transform:translate3d(0, 0, 0);transform-origin:0 0;opacity:1;}100%{transform:translate3d(0, 100%, 0);transform-origin:0 0;opacity:0;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antZoomBigIn">@keyframes css-1p3hq3p-antZoomBigIn{0%{transform:scale(0.8);opacity:0;}100%{transform:scale(1);opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antZoomBigOut">@keyframes css-1p3hq3p-antZoomBigOut{0%{transform:scale(1);}100%{transform:scale(0.8);opacity:0;}}</style><style data-vc-order="prependQueue" data-css-hash="1t7o1my" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-avatar"],:where(.css-1p3hq3p)[class*=" ant-avatar"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-avatar"]::before,:where(.css-1p3hq3p)[class*=" ant-avatar"]::before,:where(.css-1p3hq3p)[class^="ant-avatar"]::after,:where(.css-1p3hq3p)[class*=" ant-avatar"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-avatar"] [class^="ant-avatar"],:where(.css-1p3hq3p)[class*=" ant-avatar"] [class^="ant-avatar"],:where(.css-1p3hq3p)[class^="ant-avatar"] [class*=" ant-avatar"],:where(.css-1p3hq3p)[class*=" ant-avatar"] [class*=" ant-avatar"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-avatar"] [class^="ant-avatar"]::before,:where(.css-1p3hq3p)[class*=" ant-avatar"] [class^="ant-avatar"]::before,:where(.css-1p3hq3p)[class^="ant-avatar"] [class*=" ant-avatar"]::before,:where(.css-1p3hq3p)[class*=" ant-avatar"] [class*=" ant-avatar"]::before,:where(.css-1p3hq3p)[class^="ant-avatar"] [class^="ant-avatar"]::after,:where(.css-1p3hq3p)[class*=" ant-avatar"] [class^="ant-avatar"]::after,:where(.css-1p3hq3p)[class^="ant-avatar"] [class*=" ant-avatar"]::after,:where(.css-1p3hq3p)[class*=" ant-avatar"] [class*=" ant-avatar"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-avatar{box-sizing:border-box;margin:0;padding:0;color:#fff;font-size:14px;line-height:30px;list-style:none;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';position:relative;display:inline-block;overflow:hidden;white-space:nowrap;text-align:center;vertical-align:middle;background:rgba(0, 0, 0, 0.25);border:1px solid transparent;width:32px;height:32px;border-radius:50%;}:where(.css-1p3hq3p).ant-avatar-image{background:transparent;}:where(.css-1p3hq3p).ant-avatar .ant-image-img{display:block;}:where(.css-1p3hq3p).ant-avatar.ant-avatar-square{border-radius:6px;}:where(.css-1p3hq3p).ant-avatar .ant-avatar-string{position:absolute;left:50%;transform-origin:0 center;}:where(.css-1p3hq3p).ant-avatar.ant-avatar-icon{font-size:18px;}:where(.css-1p3hq3p).ant-avatar.ant-avatar-icon >.anticon{margin:0;}:where(.css-1p3hq3p).ant-avatar-lg{width:40px;height:40px;line-height:38px;border-radius:50%;}:where(.css-1p3hq3p).ant-avatar-lg.ant-avatar-square{border-radius:8px;}:where(.css-1p3hq3p).ant-avatar-lg .ant-avatar-string{position:absolute;left:50%;transform-origin:0 center;}:where(.css-1p3hq3p).ant-avatar-lg.ant-avatar-icon{font-size:24px;}:where(.css-1p3hq3p).ant-avatar-lg.ant-avatar-icon >.anticon{margin:0;}:where(.css-1p3hq3p).ant-avatar-sm{width:24px;height:24px;line-height:22px;border-radius:50%;}:where(.css-1p3hq3p).ant-avatar-sm.ant-avatar-square{border-radius:4px;}:where(.css-1p3hq3p).ant-avatar-sm .ant-avatar-string{position:absolute;left:50%;transform-origin:0 center;}:where(.css-1p3hq3p).ant-avatar-sm.ant-avatar-icon{font-size:14px;}:where(.css-1p3hq3p).ant-avatar-sm.ant-avatar-icon >.anticon{margin:0;}:where(.css-1p3hq3p).ant-avatar >img{display:block;width:100%;height:100%;object-fit:cover;}:where(.css-1p3hq3p).ant-avatar-group{display:inline-flex;}:where(.css-1p3hq3p).ant-avatar-group .ant-avatar{border-color:#ffffff;}:where(.css-1p3hq3p).ant-avatar-group >*:not(:first-child){margin-inline-start:-8px;}:where(.css-1p3hq3p).ant-avatar-group-popover .ant-avatar+.ant-avatar{margin-inline-start:4px;}</style><style data-vc-order="prependQueue" data-css-hash="y113ri" data-token-hash="mmblq1">:where(.css-1p3hq3p)[class^="ant-notification"],:where(.css-1p3hq3p)[class*=" ant-notification"]{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';font-size:14px;box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-notification"]::before,:where(.css-1p3hq3p)[class*=" ant-notification"]::before,:where(.css-1p3hq3p)[class^="ant-notification"]::after,:where(.css-1p3hq3p)[class*=" ant-notification"]::after{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-notification"] [class^="ant-notification"],:where(.css-1p3hq3p)[class*=" ant-notification"] [class^="ant-notification"],:where(.css-1p3hq3p)[class^="ant-notification"] [class*=" ant-notification"],:where(.css-1p3hq3p)[class*=" ant-notification"] [class*=" ant-notification"]{box-sizing:border-box;}:where(.css-1p3hq3p)[class^="ant-notification"] [class^="ant-notification"]::before,:where(.css-1p3hq3p)[class*=" ant-notification"] [class^="ant-notification"]::before,:where(.css-1p3hq3p)[class^="ant-notification"] [class*=" ant-notification"]::before,:where(.css-1p3hq3p)[class*=" ant-notification"] [class*=" ant-notification"]::before,:where(.css-1p3hq3p)[class^="ant-notification"] [class^="ant-notification"]::after,:where(.css-1p3hq3p)[class*=" ant-notification"] [class^="ant-notification"]::after,:where(.css-1p3hq3p)[class^="ant-notification"] [class*=" ant-notification"]::after,:where(.css-1p3hq3p)[class*=" ant-notification"] [class*=" ant-notification"]::after{box-sizing:border-box;}:where(.css-1p3hq3p).ant-notification{box-sizing:border-box;margin:0;padding:0;color:rgba(0, 0, 0, 0.88);font-size:14px;line-height:1.5714285714285714;list-style:none;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,'Noto Sans',sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Noto Color Emoji';position:fixed;z-index:1050;margin-inline-end:24px;}:where(.css-1p3hq3p).ant-notification .ant-notification-hook-holder{position:relative;}:where(.css-1p3hq3p).ant-notification.ant-notification-top,:where(.css-1p3hq3p).ant-notification.ant-notification-bottom{margin-inline:0;}:where(.css-1p3hq3p).ant-notification.ant-notification-topLeft,:where(.css-1p3hq3p).ant-notification.ant-notification-bottomLeft{margin-inline-end:0;margin-inline-start:24px;}:where(.css-1p3hq3p).ant-notification.ant-notification-topLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,:where(.css-1p3hq3p).ant-notification.ant-notification-bottomLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,:where(.css-1p3hq3p).ant-notification.ant-notification-topLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,:where(.css-1p3hq3p).ant-notification.ant-notification-bottomLeft .ant-notification-fade-appear.ant-notification-fade-appear-active{animation-name:css-1p3hq3p-antNotificationLeftFadeIn;}:where(.css-1p3hq3p).ant-notification .ant-notification-fade-enter,:where(.css-1p3hq3p).ant-notification .ant-notification-fade-appear{animation-duration:0.2s;animation-timing-function:cubic-bezier(0.645, 0.045, 0.355, 1);animation-fill-mode:both;opacity:0;animation-play-state:paused;}:where(.css-1p3hq3p).ant-notification .ant-notification-fade-leave{animation-timing-function:cubic-bezier(0.645, 0.045, 0.355, 1);animation-fill-mode:both;animation-duration:0.2s;animation-play-state:paused;}:where(.css-1p3hq3p).ant-notification .ant-notification-fade-enter.ant-notification-fade-enter-active,:where(.css-1p3hq3p).ant-notification .ant-notification-fade-appear.ant-notification-fade-appear-active{animation-name:css-1p3hq3p-antNotificationFadeIn;animation-play-state:running;}:where(.css-1p3hq3p).ant-notification .ant-notification-fade-leave.ant-notification-fade-leave-active{animation-name:css-1p3hq3p-antNotificationFadeOut;animation-play-state:running;}:where(.css-1p3hq3p).ant-notification.ant-notification-top .ant-notification-fade-enter.ant-notification-fade-enter-active,:where(.css-1p3hq3p).ant-notification.ant-notification-top .ant-notification-fade-appear.ant-notification-fade-appear-active{animation-name:css-1p3hq3p-antNotificationTopFadeIn;}:where(.css-1p3hq3p).ant-notification.ant-notification-bottom .ant-notification-fade-enter.ant-notification-fade-enter-active,:where(.css-1p3hq3p).ant-notification.ant-notification-bottom .ant-notification-fade-appear.ant-notification-fade-appear-active{animation-name:css-1p3hq3p-antNotificationBottomFadeIn;}:where(.css-1p3hq3p).ant-notification-rtl{direction:rtl;}:where(.css-1p3hq3p).ant-notification-rtl .ant-notification-notice-btn{float:left;}:where(.css-1p3hq3p).ant-notification-notice{position:relative;width:384px;max-width:calc(100vw - 48px);margin-bottom:16px;margin-inline-start:auto;padding:20px 24px;overflow:hidden;line-height:1.5714285714285714;word-wrap:break-word;background:#ffffff;border-radius:8px;box-shadow:0 6px 16px 0 rgba(0, 0, 0, 0.08),0 3px 6px -4px rgba(0, 0, 0, 0.12),0 9px 28px 8px rgba(0, 0, 0, 0.05);}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-close-icon{font-size:14px;cursor:pointer;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-message{margin-bottom:8px;color:rgba(0, 0, 0, 0.88);font-size:16px;line-height:1.5;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-description{font-size:14px;}:where(.css-1p3hq3p).ant-notification-notice.ant-notification-notice-closable .ant-notification-notice-message{padding-inline-end:24px;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-with-icon .ant-notification-notice-message{margin-bottom:8px;margin-inline-start:36px;font-size:16px;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-with-icon .ant-notification-notice-description{margin-inline-start:36px;font-size:14px;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-icon{position:absolute;font-size:24px;line-height:0;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-icon-success.anticon{color:#52c41a;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-icon-info.anticon{color:#1677ff;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-icon-warning.anticon{color:#faad14;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-icon-error.anticon{color:#ff4d4f;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-close{position:absolute;top:20px;inset-inline-end:24px;color:rgba(0, 0, 0, 0.45);outline:none;width:22px;height:22px;border-radius:4px;transition:background-color 0.2s,color 0.2s;display:flex;align-items:center;justify-content:center;}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-close:hover{color:rgba(0, 0, 0, 0.88);background-color:rgba(0, 0, 0, 0.06);}:where(.css-1p3hq3p).ant-notification-notice .ant-notification-notice-btn{float:right;margin-top:12px;}:where(.css-1p3hq3p).ant-notification-notice-pure-panel{margin:0;}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antNotificationLeftFadeIn">@keyframes css-1p3hq3p-antNotificationLeftFadeIn{0%{right:384px;opacity:0;}100%{right:0;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antNotificationFadeIn">@keyframes css-1p3hq3p-antNotificationFadeIn{0%{left:384px;opacity:0;}100%{left:0;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antNotificationFadeOut">@keyframes css-1p3hq3p-antNotificationFadeOut{0%{max-height:150px;margin-bottom:16px;opacity:1;}100%{max-height:0;margin-bottom:0;padding-top:0;padding-bottom:0;opacity:0;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antNotificationTopFadeIn">@keyframes css-1p3hq3p-antNotificationTopFadeIn{0%{margin-top:-100%;opacity:0;}100%{margin-top:0;opacity:1;}}</style><style data-vc-order="prependQueue" data-css-hash="_effect-css-1p3hq3p-antNotificationBottomFadeIn">@keyframes css-1p3hq3p-antNotificationBottomFadeIn{0%{margin-bottom:-100%;opacity:0;}100%{margin-bottom:0;opacity:1;}}</style>
    
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="generator" content="VuePress 2.0.0-rc.23">
    <meta name="theme" content="VuePress Theme Hope 2.0.0-rc.88">
    <style>
      :root {
        --vp-c-bg: #fff;
      }

      [data-theme="dark"] {
        --vp-c-bg: #1b1b1f;
      }

      html,
      body {
        background: var(--vp-c-bg);
      }
    </style>
    <script>
      const userMode = localStorage.getItem("vuepress-theme-hope-scheme");
      const systemDarkMode =
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches;

      if (userMode === "dark" || (userMode !== "light" && systemDarkMode)) {
        document.documentElement.setAttribute("data-theme", "dark");
      }
    </script>
    <script type="application/ld+json">{"@context":"https://schema.org","@type":"Article","headline":"回溯算法秒杀所有排列/组合/子集问题","image":["https://labuladong.online/algo/logo.svg"],"dateModified":null,"author":[{"@type":"Person","name":"labuladong","url":"https://github.com/labuladong"}],"description":"本文把排列组合问题归纳为 9 种基本形式，使用统一的回溯算法框架解决力扣/LeetCode 上的所有相关题目，并给出 Java/Python/Go/JavaScript/C++ 代码实现。","isAccessibleForFree":false,"hasPart":{"@type":"WebPageElement","isAccessibleForFree":false,"cssSelector":".paywall"}}</script><meta property="og:url" content="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/"><meta property="og:site_name" content="labuladong 的算法笔记"><meta property="og:title" content="回溯算法秒杀所有排列/组合/子集问题"><meta property="og:description" content="本文把排列组合问题归纳为 9 种基本形式，使用统一的回溯算法框架解决力扣/LeetCode 上的所有相关题目，并给出 Java/Python/Go/JavaScript/C++ 代码实现。"><meta property="og:type" content="article"><meta property="og:image" content="https://labuladong.online/algo/logo.svg"><meta property="og:locale" content="zh-CN"><meta property="og:locale:alternate" content="en-US"><meta property="article:tag" content="回溯算法"><link rel="alternate" hreflang="en-us" href="https://labuladong.online/algo/en/essential-technique/permutation-combination-subset-all-in-one/"><link rel="canonical" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/"><script>
        (function () {
    const host = window.location.host;
    if (host === 'labuladong.gitee.io' || host === 'labuladong.github.io') {
        document.open();
        document.write('当前网址已弃用，<span>正在跳转到最新网址 <a href="https://labuladong.online/algo/">labuladong.online</a></span>');
        document.close();
        setTimeout(() => {
            window.location.href = 'https://labuladong.online/algo/';
        }, 3000);
    }
})();
        </script><script src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/wxLogin.js" type="text/javascript" async=""></script><meta name="application-name" content="labuladong 的算法笔记"><meta name="mobile-web-app-capable" content="yes"><meta name="theme-color" content="#46bd87"><meta name="apple-mobile-web-app-status-bar-style" content="black"><link rel="icon" href="https://labuladong.online/algo/favicon.ico"><link rel="manifest" href="https://labuladong.online/algo/manifest.webmanifest" crossorigin="use-credentials"><link rel="icon" href="https://labuladong.online/algo/assets/icon/avatar.png" type="image/png" sizes="72x72"><link rel="icon" href="https://labuladong.online/algo/assets/icon/avatar.png" type="image/png" sizes="152x152"><link rel="icon" href="https://labuladong.online/algo/assets/icon/avatar.png" type="image/png" sizes="192x192"><link rel="icon" href="https://labuladong.online/algo/assets/icon/avatar.png" type="image/png" sizes="256x256"><link rel="icon" href="https://labuladong.online/algo/assets/icon/avatar.png" type="image/png" sizes="512x512"><link rel="apple-touch-icon" href="https://labuladong.online/algo/assets/icon/avatar.png"><title>回溯算法秒杀所有排列/组合/子集问题 | labuladong 的算法笔记</title><meta name="description" content="本文把排列组合问题归纳为 9 种基本形式，使用统一的回溯算法框架解决力扣/LeetCode 上的所有相关题目，并给出 Java/Python/Go/JavaScript/C++ 代码实现。">
    <link rel="preload" href="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/style-C-n2K-C1.css" as="style"><link rel="stylesheet" href="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/style-C-n2K-C1.css">
    <link rel="modulepreload" href="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/app-CaW5wfAp.js"><link rel="modulepreload" href="https://labuladong.online/algo/assets/index.html-2mCCrkDj.js"><link rel="modulepreload" href="https://labuladong.online/algo/assets/1-D27DqC0Y.js"><link rel="modulepreload" href="https://labuladong.online/algo/assets/2-Cd4WyEQR.js">
    
  <script src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/js" async=""></script><script src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/hm.js" async=""></script><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/LoginBtn-Ojn94ZKu.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-B5AnSMJm.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/Trigger-DjZtiIuj.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/zoom-DsSa72Ky.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/slide-C9xEnCUq.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-CVUSeVcC.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/UserOutlined-BW3BPTU0.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/eagerComputed-A-RFxBXk.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-DfePtilW.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/HiddenPart-74TvyIMD.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/server-BgwuSrNT.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/DynamicHtmlRenderer-DaJ5cQ-1.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/LoginPanel-Bfjf6E8C.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-D4V0KqM-.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/pickAttrs-jwRvj57t.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/styleChecker-ku73EaZm.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-c71Ivf4R.js"><script type="text/javascript" async="" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/iconify-icon@2" data-loaded="true"></script><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-DW4PaFzr.js"><link id="algolia-preconnect" rel="preconnect" href="https://ggehl9vsdz-dsn.algolia.net/" crossorigin=""><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/decompress-DcEL3icH.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-BXcfxZMa.js"><link rel="modulepreload" as="script" crossorigin="" href="https://labuladong.online/algo/assets/index-DZywjb9z.js"></head>
  <body>
    <div id="app"><!--[--><!--[--><!--[--><span tabindex="-1"></span><a href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#main-content" class="vp-skip-link sr-only">跳至主要內容</a><!--]--><div class="theme-container external-link-icon has-toc" vp-container=""><!--[--><header id="navbar" class="vp-navbar" vp-navbar=""><div class="vp-navbar-start"><button type="button" class="vp-toggle-sidebar-button" title="Toggle Sidebar"><span class="icon"></span></button><!--[--><a class="route-link vp-brand" href="https://labuladong.online/algo/" aria-label="返回首页"><img class="vp-nav-logo" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/logo.svg" alt=""><!----><span class="vp-site-name hide-in-pad">labuladong 的算法笔记</span></a><!--]--></div><div class="vp-navbar-center"><!--[--><nav class="vp-nav-links"><div class="vp-nav-item hide-in-mobile"><a class="route-link auto-link" href="https://labuladong.online/algo/home/" aria-label="主站"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-home" height="1em" sizing="height" key="ic:twotone-home"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M12 3L2 12h3v8h6v-6h2v6h6v-8h3zm5 15h-2v-6H9v6H7v-7.81l5-4.5l5 4.5z"></path><path fill="currentColor" d="M7 10.19V18h2v-6h6v6h2v-7.81l-5-4.5z" opacity=".3"></path></svg></template></iconify-icon><!--]-->主站<!----></a></div><div class="vp-nav-item hide-in-mobile"><a class="route-link auto-link" href="https://labuladong.online/algo/intro/site-vip/" aria-label="本站会员"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-diamond" height="1em" sizing="height" key="ic:twotone-diamond"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M8.88 5H6.24l-1.5 3h2.64zm10.38 3l-1.5-3h-2.64l1.5 3zM11 16.68V10H5.44zm2 0L18.56 10H13zM12.88 5h-1.76l-1.5 3h4.76z" opacity=".3"></path><path fill="currentColor" d="M19 3H5L2 9l10 12L22 9zm-1.24 2l1.5 3h-2.65l-1.5-3zM6.24 5h2.65l-1.5 3H4.74zM11 16.68L5.44 10H11zM9.62 8l1.5-3h1.76l1.5 3zM13 16.68V10h5.56z"></path></svg></template></iconify-icon><!--]-->本站会员<!----></a></div><div class="vp-nav-item hide-in-mobile"><a class="route-link auto-link" href="https://labuladong.online/algo/intro/bug-report/" aria-label="反馈问题"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-bug-report" height="1em" sizing="height" key="ic:twotone-bug-report"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M15.83 9.65L15.46 9c-.3-.53-.71-.96-1.21-1.31l-.61-.42l-.68-.16C12.63 7.04 12.32 7 12 7c-.31 0-.63.04-.94.11l-.74.18l-.57.4A4.1 4.1 0 0 0 8.54 9l-.37.65l-.1.65c-.04.23-.07.48-.07.7v4c0 .22.03.47.07.7l.1.65l.37.65c.72 1.24 2.04 2 3.46 2s2.74-.77 3.46-2l.37-.64l.1-.65c.04-.24.07-.49.07-.71v-4c0-.22-.03-.47-.07-.7zM14 16h-4v-2h4zm0-4h-4v-2h4z" opacity=".3"></path><path fill="currentColor" d="M20 8h-2.81a6 6 0 0 0-1.82-1.96L17 4.41L15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5s-.96.06-1.41.17L8.41 3L7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20zm-4 4v3c0 .22-.03.47-.07.7l-.1.65l-.37.65c-.72 1.24-2.04 2-3.46 2s-2.74-.77-3.46-2l-.37-.64l-.1-.65C8.03 15.47 8 15.22 8 15v-4c0-.22.03-.47.07-.7l.1-.65l.37-.65c.3-.52.72-.97 1.21-1.31l.57-.39l.74-.18a3.8 3.8 0 0 1 1.89 0l.68.16l.61.42c.5.34.91.78 1.21 1.31l.38.65l.1.65c.04.22.07.47.07.69zm-6 2h4v2h-4zm0-4h4v2h-4z"></path></svg></template></iconify-icon><!--]-->反馈问题<!----></a></div><div class="vp-nav-item hide-in-mobile"><div class="vp-dropdown-wrapper"><button type="button" class="vp-dropdown-title" aria-label="更新日志"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-build-circle" height="1em" sizing="height" key="ic:twotone-build-circle"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M12 4c-4.41 0-8 3.59-8 8s3.59 8 8 8s8-3.59 8-8s-3.59-8-8-8" opacity=".3"></path><path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8"></path><path fill="currentColor" d="M12.68 7.76a3.47 3.47 0 0 0-4.1-.59l2.35 2.35l-1.41 1.41l-2.35-2.35c-.71 1.32-.52 2.99.59 4.1c.98.98 2.4 1.24 3.62.81l3.41 3.41c.2.2.51.2.71 0l1.4-1.4c.2-.2.2-.51 0-.71l-3.41-3.41c.43-1.23.17-2.64-.81-3.62"></path></svg></template></iconify-icon>更新日志<!--]--><span class="arrow"></span><ul class="vp-dropdown"><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/changelog/website/" aria-label="网站更新日志"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-web" width="1em" height="1em" sizing="both" key="ic:twotone-web"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M4 9h10.5v3.5H4zm0 5.5h10.5V18H4zM16.5 9H20v9h-3.5z" opacity=".3"></path><path fill="currentColor" d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m-5.5 14H4v-3.5h10.5zm0-5.5H4V9h10.5zM20 18h-3.5V9H20z"></path></svg></template></iconify-icon><!--]-->网站更新日志<!----></a></li><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/changelog/visualize/" aria-label="可视化面板更新日志"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-auto-fix-high" width="1em" height="1em" sizing="both" key="ic:twotone-auto-fix-high"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity=".3"></path><path fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg></template></iconify-icon><!--]-->可视化面板更新日志<!----></a></li><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/changelog/chrome/" aria-label="Chrome 插件更新日志"><!--[--><iconify-icon class="vp-icon" icon="mingcute:chrome-line" width="1em" height="1em" sizing="both" key="mingcute:chrome-line"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"></path><path fill="currentColor" d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12S6.477 2 12 2M4.546 9.09a8.002 8.002 0 0 0 6.096 10.796l.248.038l1.708-2.96a5 5 0 0 1-4.86-2.35zM19.419 9H16c.628.836 1 1.874 1 3c0 .942-.26 1.823-.713 2.575l-3.08 5.335A8.002 8.002 0 0 0 19.419 9M12 9a3 3 0 1 0 0 6a3 3 0 0 0 0-6m0-5a7.98 7.98 0 0 0-6.134 2.864l-.172.213L7.4 10.034a5 5 0 0 1 4.362-3.028L12 7h6.245A7.99 7.99 0 0 0 12 4"></path></g></svg></template></iconify-icon><!--]-->Chrome 插件更新日志<!----></a></li><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/changelog/vscode/" aria-label="vscode 插件更新日志"><!--[--><iconify-icon class="vp-icon" icon="tabler:brand-vscode" width="1em" height="1em" sizing="both" key="tabler:brand-vscode"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M16 3v18l4-2.5v-13zM9.165 13.903L5 17.5l-2-1L7.333 12m1.735-1.802L16 3v5l-4.795 4.141"></path><path d="M16 16.5L5 6.5l-2 1L16 21"></path></g></svg></template></iconify-icon><!--]-->vscode 插件更新日志<!----></a></li><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/changelog/jetbrain/" aria-label="Jetbrains 插件更新日志"><!--[--><iconify-icon class="vp-icon" icon="ic:twotone-rocket-launch" width="1em" height="1em" sizing="both" key="ic:twotone-rocket-launch"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M6.71 18.71c-.28.28-2.17.76-2.17.76s.47-1.88.76-2.17c.17-.19.42-.3.7-.3a1.003 1.003 0 0 1 .71 1.71m.7-7.88l-1.91-.82l1.97-1.97l1.44.29c-.57.83-1.08 1.7-1.5 2.5m6.58 7.67l-.82-1.91c.8-.42 1.67-.93 2.49-1.5l.29 1.44zm6-14.49S16.44 3.32 11.76 8c-1.32 1.32-2.4 3.38-2.73 4.04l2.93 2.93c.65-.32 2.71-1.4 4.04-2.73c4.68-4.68 3.99-8.23 3.99-8.23M15 11c-1.1 0-2-.9-2-2s.9-2 2-2s2 .9 2 2s-.9 2-2 2" opacity=".3"></path><path fill="currentColor" d="M6 15c-.83 0-1.58.34-2.12.88C2.7 17.06 2 22 2 22s4.94-.7 6.12-1.88A2.996 2.996 0 0 0 6 15m.71 3.71c-.28.28-2.17.76-2.17.76s.47-1.88.76-2.17c.17-.19.42-.3.7-.3a1.003 1.003 0 0 1 .71 1.71m10.71-5.06c6.36-6.36 4.24-11.31 4.24-11.31S16.71.22 10.35 6.58l-2.49-.5a2.03 2.03 0 0 0-1.81.55L2 10.69l5 2.14L11.17 17l2.14 5l4.05-4.05c.47-.47.68-1.15.55-1.81zM7.41 10.83l-1.91-.82l1.97-1.97l1.44.29c-.57.83-1.08 1.7-1.5 2.5m6.58 7.67l-.82-1.91c.8-.42 1.67-.93 2.49-1.5l.29 1.44zM16 12.24c-1.32 1.32-3.38 2.4-4.04 2.73l-2.93-2.93c.32-.65 1.4-2.71 2.73-4.04c4.68-4.68 8.23-3.99 8.23-3.99s.69 3.55-3.99 8.23M15 11c1.1 0 2-.9 2-2s-.9-2-2-2s-2 .9-2 2s.9 2 2 2"></path></svg></template></iconify-icon><!--]-->Jetbrains 插件更新日志<!----></a></li></ul></button></div></div></nav><!--]--></div><div class="vp-navbar-end"><!--[--><div class="vp-nav-item"><div class="vp-dropdown-wrapper"><button type="button" class="vp-dropdown-title" aria-label="选择语言"><!--[--><svg xmlns="http://www.w3.org/2000/svg" class="icon i18n-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="i18n icon" name="i18n" style="width:1rem;height:1rem;vertical-align:middle;"><path d="M379.392 460.8 494.08 575.488l-42.496 102.4L307.2 532.48 138.24 701.44l-71.68-72.704L234.496 460.8l-45.056-45.056c-27.136-27.136-51.2-66.56-66.56-108.544h112.64c7.68 14.336 16.896 27.136 26.112 35.84l45.568 46.08 45.056-45.056C382.976 312.32 409.6 247.808 409.6 204.8H0V102.4h256V0h102.4v102.4h256v102.4H512c0 70.144-37.888 161.28-87.04 210.944L378.88 460.8zM576 870.4 512 1024H409.6l256-614.4H768l256 614.4H921.6l-64-153.6H576zM618.496 768h196.608L716.8 532.48 618.496 768z"></path></svg><!--]--><span class="arrow"></span><ul class="vp-dropdown"><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" aria-label="简体中文"><!---->简体中文<!----></a></li><li class="vp-dropdown-item"><a class="route-link auto-link" href="https://labuladong.online/algo/en/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" aria-label="English"><!---->English<!----></a></li></ul></button></div></div><div class="vp-nav-item vp-action"><a class="vp-action-link" href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener noreferrer" aria-label="GitHub"><svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="github icon" name="github" style="width:1.25rem;height:1.25rem;vertical-align:middle;"><path d="M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"></path></svg></a></div><div class="vp-nav-item hide-in-mobile"><button type="button" class="vp-color-mode-switch" id="color-mode-switch"><svg xmlns="http://www.w3.org/2000/svg" class="icon auto-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="auto icon" name="auto" style="display:block;"><path d="M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"></path></svg><svg xmlns="http://www.w3.org/2000/svg" class="icon dark-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="dark icon" name="dark" style="display:none;"><path d="M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"></path></svg><svg xmlns="http://www.w3.org/2000/svg" class="icon light-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="light icon" name="light" style="display:none;"><path d="M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"></path></svg></button></div><div data-v-365e9eaa="" class="vp-nav-item hide-in-mobile"><button data-v-365e9eaa="" type="button" class="vp-color-mode-switch"><svg data-v-365e9eaa="" xmlns="http://www.w3.org/2000/svg" width="1.7em" height="1.7em" viewBox="0 0 24 24"><path data-v-365e9eaa="" fill="currentColor" d="M6 15q-.425 0-.712-.288T5 14t.288-.712T6 13t.713.288T7 14t-.288.713T6 15m0 4q-.425 0-.712-.288T5 18t.288-.712T6 17t.713.288T7 18t-.288.713T6 19m0-8q-.425 0-.712-.288T5 10t.288-.712T6 9t.713.288T7 10t-.288.713T6 11m-3-.5q-.2 0-.35-.15T2.5 10t.15-.35T3 9.5t.35.15t.15.35t-.15.35t-.35.15M6 7q-.425 0-.712-.288T5 6t.288-.712T6 5t.713.288T7 6t-.288.713T6 7m-3 7.5q-.2 0-.35-.15T2.5 14t.15-.35t.35-.15t.35.15t.15.35t-.15.35t-.35.15m7 7q-.2 0-.35-.15T9.5 21t.15-.35t.35-.15t.35.15t.15.35t-.15.35t-.35.15m0-18q-.2 0-.35-.15T9.5 3t.15-.35t.35-.15t.35.15t.15.35t-.15.35t-.35.15M10 7q-.425 0-.712-.288T9 6t.288-.712T10 5t.713.288T11 6t-.288.713T10 7m0 8.5q-.625 0-1.062-.437T8.5 14t.438-1.062T10 12.5t1.063.438T11.5 14t-.437 1.063T10 15.5m0-4q-.625 0-1.062-.437T8.5 10t.438-1.062T10 8.5t1.063.438T11.5 10t-.437 1.063T10 11.5m0 7.5q-.425 0-.712-.288T9 18t.288-.712T10 17t.713.288T11 18t-.288.713T10 19m9-7q0-2.65-1.725-4.6T13 5.075q-.425-.05-.713-.35T12 4t.3-.712t.725-.238q3.375.4 5.675 2.938T21 12t-2.3 6.013t-5.675 2.937q-.425.05-.725-.237T12 20t.288-.725t.712-.35q2.55-.375 4.275-2.325T19 12m-7 0"></path></svg></button></div><!--[--><div id="docsearch-container" style="display:none;"></div><div><button type="button" class="DocSearch DocSearch-Button" aria-label="搜索文档"><span class="DocSearch-Button-Container"><svg width="20" height="20" class="DocSearch-Search-Icon" viewBox="0 0 20 20"><path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path></svg><span class="DocSearch-Button-Placeholder">搜索</span></span><span class="DocSearch-Button-Keys"><kbd class="DocSearch-Button-Key"><svg width="15" height="15" class="DocSearch-Control-Key-Icon"><path d="M4.505 4.496h2M5.505 5.496v5M8.216 4.496l.055 5.993M10 7.5c.333.333.5.667.5 1v2M12.326 4.5v5.996M8.384 4.496c1.674 0 2.116 0 2.116 1.5s-.442 1.5-2.116 1.5M3.205 9.303c-.09.448-.277 1.21-1.241 1.203C1 10.5.5 9.513.5 8V7c0-1.57.5-2.5 1.464-2.494.964.006 1.134.598 1.24 1.342M12.553 10.5h1.953" stroke-width="1.2" stroke="currentColor" fill="none" stroke-linecap="square"></path></svg></kbd><kbd class="DocSearch-Button-Key">K</kbd></span></button></div><!--]--><a href="https://labuladong.online/algo/user/profile/" class="vp-link vp-brand vp-brand ant-dropdown-trigger"><span class="ant-avatar ant-avatar-circle ant-avatar-image ant-avatar-icon css-1p3hq3p" style="background-color: rgba(85, 120, 147, 0.33); width: 50px; height: 50px; line-height: 50px; font-size: 25px;"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132"></span></a><!----><button class="css-1p3hq3p ant-btn ant-btn-primary" type="button" style="display: none;"><!----><span>登 录</span></button><!----><!--]--><button type="button" class="vp-toggle-navbar-button" aria-label="Toggle Navbar" aria-expanded="false" aria-controls="nav-screen"><span><span class="vp-top"></span><span class="vp-middle"></span><span class="vp-bottom"></span></span></button></div></header><!----><!--]--><!----><div class="toggle-sidebar-wrapper"><span class="arrow start"></span></div><aside id="sidebar" class="vp-sidebar" vp-sidebar="" data-v-50e65396=""><!----><ul data-v-50e65396="" class="vp-sidebar-links"><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/home/" aria-label="本站简介"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>本站简介<!----></a></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">配套学习工具使用指南</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">针对初学和速成的学习规划</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">入门：编程语言基础及练习</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">基础：数据结构及排序精讲</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable active" type="button"><!----><span class="vp-sidebar-title">第零章、核心刷题框架汇总</span><span class="vp-arrow down"></span></button><ul class="vp-sidebar-links"><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/intro/core-intro/" aria-label="本章导读"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>本章导读<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/algorithm-summary/" aria-label="学习数据结构和算法的框架思维"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>学习数据结构和算法的框架思维<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/linked-list-skills-summary/" aria-label="双指针技巧秒杀七道链表题目"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>双指针技巧秒杀七道链表题目<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/array-two-pointers-summary/" aria-label="双指针技巧秒杀七道数组题目"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>双指针技巧秒杀七道数组题目<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/sliding-window-framework/" aria-label="滑动窗口算法核心代码模板"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>滑动窗口算法核心代码模板<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/binary-tree-summary/" aria-label="二叉树系列算法核心纲领"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>二叉树系列算法核心纲领<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/understand-recursion/" aria-label="一个视角 + 两种思维模式搞定递归"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>一个视角 + 两种思维模式搞定递归<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/dynamic-programming-framework/" aria-label="动态规划解题套路框架"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>动态规划解题套路框架<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/backtrack-framework/" aria-label="回溯算法解题套路框架"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>回溯算法解题套路框架<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/bfs-framework/" aria-label="BFS 算法解题套路框架"><iconify-icon class="vp-icon" icon="ic:twotone-flag" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.36 6H7v6h7.24l.4 2H18V8h-5.24z" opacity="0.3"></path><path fill="currentColor" d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6zm3.6 8h-3.36l-.4-2H7V6h5.36l.4 2H18z"></path></svg></svg></template></iconify-icon>BFS 算法解题套路框架<!----></a></li><li><a class="route-link route-link-active auto-link vp-sidebar-link vp-sidebar-page active" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/" aria-label="回溯算法秒杀所有排列/组合/子集问题"><iconify-icon class="vp-icon" icon="ic:twotone-access-time" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12 4c-4.42 0-8 3.58-8 8s3.58 8 8 8s8-3.58 8-8s-3.58-8-8-8m4.25 12.15L11 13V7h1.5v5.25l4.5 2.67z" opacity="0.3"></path><path fill="currentColor" d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8s8 3.58 8 8s-3.58 8-8 8m.5-13H11v6l5.25 3.15l.75-1.23l-4.5-2.67z"></path></svg></svg></template></iconify-icon>回溯算法秒杀所有排列/组合/子集问题<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/greedy/" aria-label="贪心算法解题套路框架"><iconify-icon class="vp-icon" icon="ic:twotone-menu-book" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M21 5c-1.11-.35-2.33-.5-3.5-.5c-1.95 0-4.05.4-5.5 1.5c-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5c.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5c1.35-.85 3.8-1.5 5.5-1.5c1.65 0 3.35.3 4.75 1.05c.1.05.15.05.25.05c.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1M3 18.5V7c1.1-.35 2.3-.5 3.5-.5c1.34 0 3.13.41 4.5.99v11.5C9.63 18.41 7.84 18 6.5 18c-1.2 0-2.4.15-3.5.5m18 0c-1.1-.35-2.3-.5-3.5-.5c-1.34 0-3.13.41-4.5.99V7.49c1.37-.59 3.16-.99 4.5-.99c1.2 0 2.4.15 3.5.5z"></path><path fill="currentColor" d="M11 7.49c-1.37-.58-3.16-.99-4.5-.99c-1.2 0-2.4.15-3.5.5v11.5c1.1-.35 2.3-.5 3.5-.5c1.34 0 3.13.41 4.5.99z" opacity=".3"></path><path fill="currentColor" d="M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54m0 2.66c.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.34 2.18-.54 3.5-.54m0 2.67c.88 0 1.73.09 2.5.26v-1.52c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54"></path></svg></template></iconify-icon>贪心算法解题套路框架<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/divide-and-conquer/" aria-label="分治算法解题套路框架"><iconify-icon class="vp-icon" icon="ic:twotone-menu-book" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M21 5c-1.11-.35-2.33-.5-3.5-.5c-1.95 0-4.05.4-5.5 1.5c-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5c.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5c1.35-.85 3.8-1.5 5.5-1.5c1.65 0 3.35.3 4.75 1.05c.1.05.15.05.25.05c.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1M3 18.5V7c1.1-.35 2.3-.5 3.5-.5c1.34 0 3.13.41 4.5.99v11.5C9.63 18.41 7.84 18 6.5 18c-1.2 0-2.4.15-3.5.5m18 0c-1.1-.35-2.3-.5-3.5-.5c-1.34 0-3.13.41-4.5.99V7.49c1.37-.59 3.16-.99 4.5-.99c1.2 0 2.4.15 3.5.5z"></path><path fill="currentColor" d="M11 7.49c-1.37-.58-3.16-.99-4.5-.99c-1.2 0-2.4.15-3.5.5v11.5c1.1-.35 2.3-.5 3.5-.5c1.34 0 3.13.41 4.5.99z" opacity=".3"></path><path fill="currentColor" d="M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54m0 2.66c.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.34 2.18-.54 3.5-.54m0 2.67c.88 0 1.73.09 2.5.26v-1.52c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54"></path></svg></template></iconify-icon>分治算法解题套路框架<!----></a></li><li><a class="route-link auto-link vp-sidebar-link vp-sidebar-page" href="https://labuladong.online/algo/essential-technique/complexity-analysis/" aria-label="算法时空复杂度分析实用指南"><iconify-icon class="vp-icon" icon="ic:twotone-menu-book" width="1em" height="1em" sizing="both"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M21 5c-1.11-.35-2.33-.5-3.5-.5c-1.95 0-4.05.4-5.5 1.5c-1.45-1.1-3.55-1.5-5.5-1.5S2.45 4.9 1 6v14.65c0 .25.25.5.5.5c.1 0 .15-.05.25-.05C3.1 20.45 5.05 20 6.5 20c1.95 0 4.05.4 5.5 1.5c1.35-.85 3.8-1.5 5.5-1.5c1.65 0 3.35.3 4.75 1.05c.1.05.15.05.25.05c.25 0 .5-.25.5-.5V6c-.6-.45-1.25-.75-2-1M3 18.5V7c1.1-.35 2.3-.5 3.5-.5c1.34 0 3.13.41 4.5.99v11.5C9.63 18.41 7.84 18 6.5 18c-1.2 0-2.4.15-3.5.5m18 0c-1.1-.35-2.3-.5-3.5-.5c-1.34 0-3.13.41-4.5.99V7.49c1.37-.59 3.16-.99 4.5-.99c1.2 0 2.4.15 3.5.5z"></path><path fill="currentColor" d="M11 7.49c-1.37-.58-3.16-.99-4.5-.99c-1.2 0-2.4.15-3.5.5v11.5c1.1-.35 2.3-.5 3.5-.5c1.34 0 3.13.41 4.5.99z" opacity=".3"></path><path fill="currentColor" d="M17.5 10.5c.88 0 1.73.09 2.5.26V9.24c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54m0 2.66c.88 0 1.73.09 2.5.26V11.9c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.34 2.18-.54 3.5-.54m0 2.67c.88 0 1.73.09 2.5.26v-1.52c-.79-.15-1.64-.24-2.5-.24c-1.28 0-2.46.16-3.5.47v1.57c.99-.35 2.18-.54 3.5-.54"></path></svg></template></iconify-icon>算法时空复杂度分析实用指南<!----></a></li></ul></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">第一章、经典数据结构算法</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">第二章、经典暴力搜索算法</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">第三章、经典动态规划算法</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">第四章、其他常见算法技巧</span><span class="vp-arrow end"></span></button><!----></section></li><li><section class="vp-sidebar-group"><button class="vp-sidebar-header clickable" type="button"><!----><span class="vp-sidebar-title">附录</span><span class="vp-arrow end"></span></button><!----></section></li></ul><!----><div class="slot-demo-block" style="cursor: pointer;background: var(--detail-c-bg);" data-v-50e65396=""><iconify-icon class="font-icon icon" icon="ic:twotone-delete" data-v-50e65396=""><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:0}span,svg{display:block;margin:auto}</style><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M8 9h8v10H8z" opacity=".3"></path><path fill="currentColor" d="m15.5 4l-1-1h-5l-1 1H5v2h14V4zM6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM8 9h8v10H8z"></path></svg></template></iconify-icon>清除阅读历史</div></aside><!--[--><main id="main-content" class="vp-page" data-v-11f2a8aa=""><!--[--><!----><!----><nav class="vp-breadcrumb disable"></nav><div class="vp-page-title"><h1><!---->回溯算法秒杀所有排列/组合/子集问题</h1><div class="page-info"><span class="page-author-info" aria-label="作者🖊" data-balloon-pos="up"><svg xmlns="http://www.w3.org/2000/svg" class="icon author-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="author icon" name="author"><path d="M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"></path></svg><span><a class="page-author-item" href="https://github.com/labuladong" target="_blank" rel="noopener noreferrer">labuladong</a></span><span property="author" content="labuladong"></span></span><span class="page-original-info">原创</span><span class="page-word-info" aria-label="字数🔠" data-balloon-pos="up"><svg xmlns="http://www.w3.org/2000/svg" class="icon word-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="word icon" name="word"><path d="M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"></path><path d="M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"></path></svg><span>约 9243 字</span><meta property="wordCount" content="9243"></span><div class="page-reading-time-info" aria-label="题目数量" data-balloon-pos="up"><svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" viewBox="0 0 24 24" class="font-icon icon">
      <g fill="none">
        <circle cx="12" cy="12" r="9" fill="currentColor" fill-opacity="0.25"></circle>
        <path stroke="currentColor" stroke-linecap="round" stroke-width="1.2" d="m9 10l3.258 2.444a1 1 0 0 0 1.353-.142L20 5"></path>
        <path stroke="currentColor" stroke-linecap="round" stroke-width="1.2" d="M21 12a9 9 0 1 1-6.67-8.693"></path>
      </g>
    </svg><span>解决 10 题</span></div></div><hr></div><div class="vp-toc-placeholder"><aside id="toc" vp-toc=""><div data-v-11f2a8aa="" class="vip-status"><div data-v-11f2a8aa="" style="cursor: pointer;"><a data-v-11f2a8aa="" href="https://labuladong.online/algo/intro/chrome/" class=""><div data-v-11f2a8aa="" class="ext-connected"><svg data-v-11f2a8aa="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-11f2a8aa="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg> &nbsp;插件已连接</div></a></div><div data-v-11f2a8aa="" style="cursor: pointer;"><div data-v-11f2a8aa=""><a data-v-11f2a8aa="" href="https://labuladong.online/algo/intro/site-vip/" class="ext-connected"><svg data-v-11f2a8aa="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-11f2a8aa="" fill="currentColor" d="M6 20h12V10H6zm6-7c1.1 0 2 .9 2 2s-.9 2-2 2s-2-.9-2-2s.9-2 2-2" opacity="0.3"></path><path data-v-11f2a8aa="" fill="currentColor" d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h2c0-1.66 1.34-3 3-3s3 1.34 3 3v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2m0 12H6V10h12zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2s-2 .9-2 2s.9 2 2 2"></path></svg> &nbsp;网站会员已解锁</a></div><!----></div><div data-v-11f2a8aa="" style="display: flex; justify-content: center; align-items: center;"><a data-v-11f2a8aa="" href="https://labuladong.online/algo/intro/bug-report/" class="helper-btn" target="_blank"> &nbsp;遇到问题 <svg data-v-11f2a8aa="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-11f2a8aa="" fill="currentColor" d="M11.07 12.85c.77-1.39 2.25-2.21 3.11-3.44c.91-1.29.4-3.7-2.18-3.7c-1.69 0-2.52 1.28-2.87 2.34L6.54 6.96C7.25 4.83 9.18 3 11.99 3c2.35 0 3.96 1.07 4.78 2.41c.7 1.15 1.11 3.3.03 4.9c-1.2 1.77-2.35 2.31-2.97 3.45c-.25.46-.35.76-.35 2.24h-2.89c-.01-.78-.13-2.05.48-3.15M14 20c0 1.1-.9 2-2 2s-2-.9-2-2s.9-2 2-2s2 .9 2 2"></path></svg></a></div></div><div class="vp-toc-header">此页内容<!----><div class="arrow end"></div></div><div class="vp-toc-wrapper"><ul class="vp-toc-list"><li class="vp-toc-item active"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89">子集（元素无重不可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E7%BB%84%E5%90%88-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89">组合（元素无重不可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%8E%92%E5%88%97-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89">排列（元素无重不可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E7%BB%84%E5%90%88-%E5%85%83%E7%B4%A0%E5%8F%AF%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89">子集/组合（元素可重不可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%8E%92%E5%88%97-%E5%85%83%E7%B4%A0%E5%8F%AF%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89">排列（元素可重不可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E7%BB%84%E5%90%88-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E5%8F%AF%E5%A4%8D%E9%80%89">子集/组合（元素无重可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%8E%92%E5%88%97-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E5%8F%AF%E5%A4%8D%E9%80%89">排列（元素无重可复选）</a></li><!----><li class="vp-toc-item"><a class="route-link vp-toc-link level2" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93">最后总结</a></li><!----></ul><div class="vp-toc-marker" style="top: 0px;"></div></div><!----></aside></div><div class="" vp-content=""><!----><div id="markdown-content"><div style="display:none;"><h3 tabindex="-1"> 216. 组合总和 III https://leetcode.cn/problems/combination-sum-iii </h3><h3 tabindex="-1"> 39. 组合总和 https://leetcode.cn/problems/combination-sum </h3><h3 tabindex="-1"> 40. 组合总和 II https://leetcode.cn/problems/combination-sum-ii </h3><h3 tabindex="-1"> 46. 全排列 https://leetcode.cn/problems/permutations </h3><h3 tabindex="-1"> 47. 全排列 II https://leetcode.cn/problems/permutations-ii </h3><h3 tabindex="-1"> 77. 组合 https://leetcode.cn/problems/combinations </h3><h3 tabindex="-1"> 78. 子集 https://leetcode.cn/problems/subsets </h3><h3 tabindex="-1"> 90. 子集 II https://leetcode.cn/problems/subsets-ii </h3><h3 tabindex="-1"> 剑指 Offer II 082. 含有重复元素集合的组合 https://leetcode.cn/problems/4sjJUc </h3><h3 tabindex="-1"> 剑指 Offer II 084. 含有重复元素集合的全排列 https://leetcode.cn/problems/7p8L0Z </h3></div><div class="hint-container note"><p class="hint-container-title">本文讲解的例题</p><table><thead><tr><th style="text-align:center;">LeetCode</th><th style="text-align:center;">力扣</th><th style="text-align:center;">难度</th></tr></thead><tbody><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/combination-sum-iii/" target="_blank" rel="noopener noreferrer">216. Combination Sum III</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/combination-sum-iii/" target="_blank" rel="noopener noreferrer">216. 组合总和 III</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener noreferrer">39. Combination Sum</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/combination-sum/" target="_blank" rel="noopener noreferrer">39. 组合总和</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="noopener noreferrer">40. Combination Sum II</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/combination-sum-ii/" target="_blank" rel="noopener noreferrer">40. 组合总和 II</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener noreferrer">46. Permutations</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/permutations/" target="_blank" rel="noopener noreferrer">46. 全排列</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener noreferrer">47. Permutations II</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/permutations-ii/" target="_blank" rel="noopener noreferrer">47. 全排列 II</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/combinations/" target="_blank" rel="noopener noreferrer">77. Combinations</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/combinations/" target="_blank" rel="noopener noreferrer">77. 组合</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener noreferrer">78. Subsets</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/subsets/" target="_blank" rel="noopener noreferrer">78. 子集</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;"><a href="https://leetcode.com/problems/subsets-ii/" target="_blank" rel="noopener noreferrer">90. Subsets II</a></td><td style="text-align:center;"><a href="https://leetcode.cn/problems/subsets-ii/" target="_blank" rel="noopener noreferrer">90. 子集 II</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;"><a href="https://leetcode.cn/problems/4sjJUc/" target="_blank" rel="noopener noreferrer">剑指 Offer II 082. 含有重复元素集合的组合</a></td><td style="text-align:center;">🟠</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;"><a href="https://leetcode.cn/problems/7p8L0Z/" target="_blank" rel="noopener noreferrer">剑指 Offer II 084. 含有重复元素集合的全排列</a></td><td style="text-align:center;">🟠</td></tr></tbody></table></div><div class="hint-container info"><p class="hint-container-title">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class="route-link" href="https://labuladong.online/algo/essential-technique/binary-tree-summary/"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>二叉树系列算法（纲领篇）</a></li><li><a class="route-link" href="https://labuladong.online/algo/essential-technique/backtrack-framework/"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>回溯算法核心框架</a></li></ul></div><p>虽然排列、组合、子集系列问题是高中就学过的，但如果想编写算法解决它们，还是非常考验计算机思维的，本文就讲讲编程解决这几个问题的核心思路，以后再有什么变体，你也能手到擒来，以不变应万变。</p><p>无论是排列、组合还是子集问题，简单说无非就是让你从序列 <code>nums</code> 中以给定规则取若干元素，主要有以下几种变体：</p><p><strong>形式一、元素无重不可复选，即 <code>nums</code> 中的元素都是唯一的，每个元素最多只能被使用一次，这也是最基本的形式</strong>。</p><p>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 7 的组合应该只有 <code>[7]</code>。</p><p><strong>形式二、元素可重不可复选，即 <code>nums</code> 中的元素可以存在重复，每个元素最多只能被使用一次</strong>。</p><p>以组合为例，如果输入 <code>nums = [2,5,2,1,2]</code>，和为 7 的组合应该有两种 <code>[2,2,2,1]</code> 和 <code>[5,2]</code>。</p><p><strong>形式三、元素无重可复选，即 <code>nums</code> 中的元素都是唯一的，每个元素可以被使用若干次</strong>。</p><p>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 7 的组合应该有两种 <code>[2,2,3]</code> 和 <code>[7]</code>。</p><p>当然，也可以说有第四种形式，即元素可重可复选。但既然元素可复选，那又何必存在重复元素呢？元素去重之后就等同于形式三，所以这种情况不用考虑。</p><p>上面用组合问题举的例子，但排列、组合、子集问题都可以有这三种基本形式，所以共有 9 种变化。</p><p>除此之外，题目也可以再添加各种限制条件，比如让你求和为 <code>target</code> 且元素个数为 <code>k</code> 的组合，那这么一来又可以衍生出一堆变体，怪不得面试笔试中经常考到排列组合这种基本题型。</p><p><strong>但无论形式怎么变化，其本质就是穷举所有解，而这些解呈现树形结构，所以合理使用回溯算法框架，稍改代码框架即可把这些问题一网打尽</strong>。</p><p>具体来说，你需要先阅读并理解前文 <a class="route-link" href="https://labuladong.online/algo/essential-technique/backtrack-framework/"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>回溯算法核心套路</a>，然后记住如下子集问题和排列问题的回溯树，就可以解决所有排列组合子集相关的问题：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/1.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/2.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>为什么只要记住这两种树形结构就能解决所有相关问题呢？</p><p><strong>首先，组合问题和子集问题其实是等价的，这个后面会讲；至于之前说的三种变化形式，无非是在这两棵树上剪掉或者增加一些树枝罢了</strong>。</p><p>那么，接下来我们就开始穷举，把排列/组合/子集问题的 9 种形式都过一遍，学学如何用回溯算法把它们一套带走。</p><div class="hint-container info"><p class="hint-container-title">提示</p><p>另外，有些读者之前看过的排列/子集/组合的解法代码可能和我在本文介绍的代码不同。这是因为回溯算法有两种穷举视角，我会在后文 <a class="route-link" href="https://labuladong.online/algo/practice-in-action/two-views-of-backtrack/"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-menu-book"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>球盒模型：回溯算法穷举的两种视角</a> 手把手给你讲清楚。现在还不适合直接跟你讲那些解法，你照着我的思路学习即可。</p></div><div id="hidden_part" class="paywall"><div style="width: 100%;"><div><body><div style="display: flex; align-items: center;">
        <div>🌟</div><hr style="width: auto; flex-grow: 1; margin: 0px 10px;"><div>🌟</div></div><h2 id="子集-元素无重不可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>子集（元素无重不可复选）</span></a></h2><p>力扣第 78 题「<a href="https://leetcode.cn/problems/subsets/" class="" target="_blank" rel="noopener noreferrer">子集</a>」就是这个问题：</p><p>题目给你输入一个无重复元素的数组 <code>nums</code>，其中每个元素最多使用一次，请你返回 <code>nums</code> 的所有子集。</p><p>函数签名如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-13-0" aria-selected="false">java</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-13-1" aria-selected="false">cpp</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-13-2" aria-selected="true">python</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-13-3" aria-selected="false">go</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-13-4" aria-selected="false">javascript</button></div><div class="vp-code-tab" id="codetab-13-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-13-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-13-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-13-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-13-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div></div><p>比如输入 <code>nums = [1,2,3]</code>，算法应该返回如下子集：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[ [],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div><p>好，我们暂时不考虑如何用代码实现，先回忆一下我们的高中知识，如何手推所有子集？</p><p>首先，生成元素个数为 0 的子集，即空集 <code>[]</code>，为了方便表示，我称之为 <code>S_0</code>。</p><p>然后，在 <code>S_0</code> 的基础上生成元素个数为 1 的所有子集，我称为 <code>S_1</code>：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/3.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>接下来，我们可以在 <code>S_1</code> 的基础上推导出 <code>S_2</code>，即元素个数为 2 的所有子集：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/4.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>为什么集合 <code>[2]</code> 只需要添加 <code>3</code>，而不添加前面的 <code>1</code> 呢？</p><p>因为集合中的元素不用考虑顺序，<code>[1,2,3]</code> 中 <code>2</code> 后面只有 <code>3</code>，如果你添加了前面的 <code>1</code>，那么 <code>[2,1]</code> 会和之前已经生成的子集 <code>[1,2]</code> 重复。</p><p><strong>换句话说，我们通过保证元素之间的相对顺序不变来防止出现重复的子集</strong>。</p><p>接着，我们可以通过 <code>S_2</code> 推出 <code>S_3</code>，实际上 <code>S_3</code> 中只有一个集合 <code>[1,2,3]</code>，它是通过 <code>[1,2]</code> 推出的。</p><p>整个推导过程就是这样一棵树：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/5.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>注意这棵树的特性：</p><p><strong>如果把根节点作为第 0 层，将每个节点和根节点之间树枝上的元素作为该节点的值，那么第 <code>n</code> 层的所有节点就是大小为 <code>n</code> 的所有子集</strong>。</p><p>你比如大小为 2 的子集就是这一层节点的值：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/6.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>注意，本文之后所说「节点的值」都是指节点和根节点之间树枝上的元素，且将根节点认为是第 0 层</strong>。</p></div><p>那么再进一步，如果想计算所有子集，那只要遍历这棵多叉树，把所有节点的值收集起来不就行了？</p><p>直接看代码：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-85-0" aria-selected="false">java</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-85-1" aria-selected="false">cpp</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-85-2" aria-selected="true">python</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-85-3" aria-selected="false">go</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-85-4" aria-selected="false">javascript</button></div><div class="vp-code-tab" id="codetab-85-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数，遍历子集问题的回溯树</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;(track));</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-85-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">private:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 主函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数，遍历子集问题的回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-85-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法核心函数，遍历子集问题的回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">list</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track))</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 做选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-85-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数，遍历子集问题的回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> backtrack</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> func</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">nil</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">...))</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-85-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsets</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 用于存储结果</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 用于记录回溯路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数，遍历子集问题的回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 前序遍历位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 回溯遍历下一层节点</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    };</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>看过前文 <a href="https://labuladong.online/algo/essential-technique/backtrack-framework/" class="route-link"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>回溯算法核心框架</a> 的读者应该很容易理解这段代码吧，我们使用 <code>start</code> 参数控制树枝的生长避免产生重复的子集，用 <code>track</code> 记录根节点到每个节点的路径的值，同时在前序位置把每个节点的路径值收集起来，完成回溯树的遍历就收集了所有子集：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/5.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>最后，<code>backtrack</code> 函数开头看似没有 base case，会不会进入无限递归？</p><p>其实不会的，当 <code>start == nums.length</code> 时，叶子节点的值会被装入 <code>res</code>，但 for 循环不会执行，也就结束了递归。</p><visual category="leetcode" emoji="🌟" lang="&quot;zh&quot;" slug="subsets" id="id-subsets" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/subsets/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_subsets" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_subsets" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource.html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><h2 id="组合-元素无重不可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E7%BB%84%E5%90%88-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>组合（元素无重不可复选）</span></a></h2><p>如果你能够成功的生成所有无重子集，那么你稍微改改代码就能生成所有无重组合了。</p><p>你比如说，让你在 <code>nums = [1,2,3]</code> 中拿 2 个元素形成所有的组合，你怎么做？</p><p>稍微想想就会发现，大小为 2 的所有组合，不就是所有大小为 2 的子集嘛。</p><p><strong>所以我说组合和子集是一样的：大小为 <code>k</code> 的组合就是大小为 <code>k</code> 的子集</strong>。</p><p>比如力扣第 77 题「<a href="https://leetcode.cn/problems/combinations/" class="" target="_blank" rel="noopener noreferrer">组合</a>」：</p><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>函数签名如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-138-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-138-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-138-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-138-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-138-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-138-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> n, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> k)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-138-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-138-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-138-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-138-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div></div><p>比如 <code>combine(3, 2)</code> 的返回值应该是：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[ [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div><p>这是标准的组合问题，但我给你翻译一下就变成子集问题了：</p><p><strong>给你输入一个数组 <code>nums = [1,2..,n]</code> 和一个正整数 <code>k</code>，请你生成所有大小为 <code>k</code> 的子集</strong>。</p><p>还是以 <code>nums = [1,2,3]</code> 为例，刚才让你求所有子集，就是把所有节点的值都收集起来；<strong>现在你只需要把第 2 层（根节点视为第 0 层）的节点收集起来，就是大小为 2 的所有组合</strong>：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/6.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>反映到代码上，只需要稍改 base case，控制算法仅仅收集第 <code>k</code> 层节点的值即可：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-172-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-172-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-172-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-172-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-172-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-172-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, n, k);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (k == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 遍历到了第 k 层，收集当前节点的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt;= n; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(i);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, n, k);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-172-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    deque&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 主函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, n, k);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (k == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 遍历到了第 k 层，收集当前节点的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt;= n; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(i);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, n, k);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-172-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, n, k)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> k == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 遍历到了第 k 层，收集当前节点的值</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.copy())</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, n+</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(i)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, n, k)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-172-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> backtrack</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> func</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 遍历到了第 k 层，收集当前节点的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">nil</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">...))</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt;= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-172-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combine</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 遍历到了第 k 层，收集当前节点的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt;= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">n</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 通过 start 参数控制树枝的遍历，避免产生重复的子集</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>这样，标准的组合问题也解决了。</p><visual category="leetcode" emoji="👾" lang="&quot;zh&quot;" slug="combinations" id="id-combinations" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/combinations/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_combinations" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_combinations" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(1).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><h2 id="排列-元素无重不可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%8E%92%E5%88%97-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>排列（元素无重不可复选）</span></a></h2><p>排列问题在前文 <a href="https://labuladong.online/algo/essential-technique/backtrack-framework/" class="route-link"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>回溯算法核心框架</a> 讲过，这里就简单过一下。</p><p>力扣第 46 题「<a href="https://leetcode.cn/problems/permutations/" class="" target="_blank" rel="noopener noreferrer">全排列</a>」就是标准的排列问题：</p><p>给定一个<strong>不含重复数字</strong>的数组 <code>nums</code>，返回其所有可能的<strong>全排列</strong>。</p><p>函数签名如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-209-0" aria-selected="false">java</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-209-1" aria-selected="false">cpp</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-209-2" aria-selected="true">python</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-209-3" aria-selected="false">go</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-209-4" aria-selected="false">javascript</button></div><div class="vp-code-tab" id="codetab-209-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-209-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-209-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">from</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> typing </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">import</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-209-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-209-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div></div><p>比如输入 <code>nums = [1,2,3]</code>，函数的返回值应该是：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刚才讲的组合/子集问题使用 <code>start</code> 变量保证元素 <code>nums[start]</code> 之后只会出现 <code>nums[start+1..]</code> 中的元素，通过固定元素的相对位置保证不出现重复的子集。</p><p><strong>但排列问题本身就是让你穷举元素的位置，<code>nums[i]</code> 之后也可以出现 <code>nums[i]</code> 左边的元素，所以之前的那一套玩不转了，需要额外使用 <code>used</code> 数组来标记哪些元素还可以被选择</strong>。</p><p>标准全排列可以抽象成如下这棵多叉树：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/7.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>我们用 <code>used</code> 数组标记已经在路径上的元素避免重复选择，然后收集所有叶子节点上的值，就是所有全排列的结果：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-243-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-243-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-243-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-243-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-243-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-243-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // track 中的元素会被标记为 true</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    boolean</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> boolean</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 已经存在 track 中的元素，不能重复选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (used[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-243-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 存储所有排列结果的列表</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    list&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // track 中的元素会被标记为 true</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; used;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 已经存在 track 中的元素，不能重复选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-243-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 存储所有排列结果的列表</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # track 中的元素会被标记为 true</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used = []</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used = [</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] * </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track[:])</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 已经存在 track 中的元素，不能重复选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 做选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">True</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 取消选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-243-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // track 中的元素会被标记为 true</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 已经存在 track 中的元素，不能重复选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-243-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permute</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯算法的递归路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // track 中的元素会被标记为 true</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    const</span><span style="--shiki-light: #0070C1; --shiki-dark: #4FC1FF;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> Array</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">).</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">fill</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 已经存在 track 中的元素，不能重复选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><visual category="leetcode" emoji="👾" lang="&quot;zh&quot;" slug="permutations" id="id-permutations" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/permutations/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_permutations" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_permutations" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(2).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><p>这样，全排列问题就解决了。</p><p>但如果题目不让你算全排列，而是让你算元素个数为 <code>k</code> 的排列，怎么算？</p><p>也很简单，改下 <code>backtrack</code> 函数的 base case，仅收集第 <code>k</code> 层的节点值即可：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-271-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-271-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-271-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-271-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-271-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-271-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> k) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达第 k 层，收集节点的值</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == k) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 第 k 层节点的值就是大小为 k 的排列</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, k);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-271-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达第 k 层，收集节点的值</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == k) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 第 k 层节点的值就是大小为 k 的排列</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, k, res, track);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-271-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # base case，到达第 k 层，收集节点的值</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track) == k:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 第 k 层节点的值就是大小为 k 的排列</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        res.append(track[:])</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, k)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-271-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达第 k 层，收集节点的值</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 第 k 层节点的值就是大小为 k 的排列</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">nil</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">...))</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-271-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达第 k 层，收集节点的值</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 第 k 层节点的值就是大小为 k 的排列</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">k</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><h2 id="子集-组合-元素可重不可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E7%BB%84%E5%90%88-%E5%85%83%E7%B4%A0%E5%8F%AF%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>子集/组合（元素可重不可复选）</span></a></h2><p>刚才讲的标准子集问题输入的 <code>nums</code> 是没有重复元素的，但如果存在重复元素，怎么处理呢？</p><p>力扣第 90 题「<a href="https://leetcode.cn/problems/subsets-ii/" class="" target="_blank" rel="noopener noreferrer">子集 II</a>」就是这样一个问题：</p><p>给你一个整数数组 <code>nums</code>，其中可能包含重复元素，请你返回该数组所有可能的子集。</p><p>函数签名如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-303-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-303-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-303-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-303-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-303-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-303-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-303-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-303-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-303-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-303-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div></div><p>比如输入 <code>nums = [1,2,2]</code>，你应该输出：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[ [],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div><p>当然，按道理说「集合」不应该包含重复元素的，但既然题目这样问了，我们就忽略这个细节吧，仔细思考一下这道题怎么做才是正事。</p><p>就以 <code>nums = [1,2,2]</code> 为例，为了区别两个 <code>2</code> 是不同元素，后面我们写作 <code>nums = [1,2,2']</code>。</p><p>按照之前的思路画出子集的树形结构，显然，两条值相同的相邻树枝会产生重复：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/8.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span>[ </span></span>
<span class="line"><span>    [],</span></span>
<span class="line"><span>    [1],[2],[2'],</span></span>
<span class="line"><span>    [1,2],[1,2'],[2,2'],</span></span>
<span class="line"><span>    [1,2,2']</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，<code>[2]</code> 和 <code>[1,2]</code> 这两个结果出现了重复，所以我们需要进行剪枝，如果一个节点有多条值相同的树枝相邻，则只遍历第一条，剩下的都剪掉，不要去遍历：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/9.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p><strong>体现在代码上，需要先进行排序，让相同的元素靠在一起，如果发现 <code>nums[i] == nums[i-1]</code>，则跳过</strong>：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-342-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-342-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-342-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-342-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-342-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-342-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        Arrays</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;(track));</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 剪枝逻辑，值相同的相邻树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; start &amp;&amp; nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-342-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    deque&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()));</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 剪枝逻辑，值相同的相邻树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; start &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-342-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        nums.sort()</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track[:])</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 剪枝逻辑，值相同的相邻树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i &gt; start </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">and</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-342-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">Ints</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，值相同的相邻树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">+</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = (*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-342-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> subsetsWithDup</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">((</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 前序位置，每个节点的值都是一个子集</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，值相同的相邻树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><visual category="leetcode" emoji="🌈" lang="&quot;zh&quot;" slug="subsets-ii" id="id-subsets-ii" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/subsets-ii/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_subsets-ii" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_subsets-ii" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(3).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><p>这段代码和之前标准的子集问题的代码几乎相同，就是添加了排序和剪枝的逻辑。</p><p>至于为什么要这样剪枝，结合前面的图应该也很容易理解，这样带重复元素的子集问题也解决了。</p><p><strong>我们说了组合问题和子集问题是等价的</strong>，所以我们直接看一道组合的题目吧，这是力扣第 40 题「<a href="https://leetcode.cn/problems/combination-sum-ii/" class="" target="_blank" rel="noopener noreferrer">组合总和 II</a>」：</p><p>给你输入 <code>candidates</code> 和一个目标和 <code>target</code>，从 <code>candidates</code> 中找出中所有和为 <code>target</code> 的组合。</p><p><code>candidates</code> 可能存在重复元素，且其中的每个数字最多只能使用一次。</p><p>说这是一个组合问题，其实换个问法就变成子集问题了：请你计算 <code>candidates</code> 中所有和为 <code>target</code> 的子集。</p><p>所以这题怎么做呢？</p><p>对比子集问题的解法，只要额外用一个 <code>trackSum</code> 变量记录回溯路径上的元素和，然后将 base case 改一改即可解决这道题：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-385-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-385-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-385-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-385-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-385-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-385-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的元素之和</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combinationSum2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> == </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        Arrays</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(candidates);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(candidates, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，达到目标和，找到符合条件的组合</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (trackSum == target) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，直接结束</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (trackSum &gt; target) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 剪枝逻辑，值相同的树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; start &amp;&amp; nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum += nums[i];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum -= nums[i];</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-385-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的元素之和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> trackSum = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combinationSum2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(candidates, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，达到目标和，找到符合条件的组合</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(trackSum == target) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，直接结束</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(trackSum &gt; target) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 剪枝逻辑，值相同的树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(i &gt; start &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum += </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i+</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum -= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i];</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-385-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录 track 中的元素之和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> not</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> candidates:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        candidates.sort()</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(candidates, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case，达到目标和，找到符合条件的组合</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum == target:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track[:])</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case，超过目标和，直接结束</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum &gt; target:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        </span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 剪枝逻辑，值相同的树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i &gt; start </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">and</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 做选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum += nums[i]</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum -= nums[i]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-385-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的元素之和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">Ints</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，达到目标和，找到符合条件的组合</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，超过目标和，直接结束</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，值相同的树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> += </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">+</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = (*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> -= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-385-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的元素之和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">((</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，达到目标和，找到符合条件的组合</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，直接结束</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 剪枝逻辑，值相同的树枝，只遍历第一条</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> += </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> -= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><visual category="leetcode" emoji="👾" lang="&quot;zh&quot;" slug="combination-sum-ii" id="id-combination-sum-ii" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/combination-sum-ii/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_combination-sum-ii" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_combination-sum-ii" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(4).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><h2 id="排列-元素可重不可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%8E%92%E5%88%97-%E5%85%83%E7%B4%A0%E5%8F%AF%E9%87%8D%E4%B8%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>排列（元素可重不可复选）</span></a></h2><p>排列问题的输入如果存在重复，比子集/组合问题稍微复杂一点，我们看看力扣第 47 题「<a href="https://leetcode.cn/problems/permutations-ii/" class="" target="_blank" rel="noopener noreferrer">全排列 II</a>」：</p><p>给你输入一个可包含重复数字的序列 <code>nums</code>，请你写一个算法，返回所有可能的全排列，函数签名如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-413-0" aria-selected="false">java</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-413-1" aria-selected="false">cpp</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-413-2" aria-selected="true">python</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-413-3" aria-selected="false">go</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-413-4" aria-selected="false">javascript</button></div><div class="vp-code-tab" id="codetab-413-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-413-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-413-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-413-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-413-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div></div><p>比如输入 <code>nums = [1,2,2]</code>，函数返回：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[ [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div><p>先看解法代码：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-437-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-437-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-437-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-437-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-437-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-437-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    boolean</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        Arrays</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> boolean</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (used[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !used[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-437-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; used;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-437-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used = []</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        nums.sort()</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used = [</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] * </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track[:])</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> and</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">and</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> not</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">                continue</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">True</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-437-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">Ints</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-437-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteUnique</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> Array</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">).</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">fill</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 先排序，让相同的元素靠在一起</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">((</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">slice</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><visual category="leetcode" emoji="🍭" lang="&quot;zh&quot;" slug="permutations-ii" id="id-permutations-ii" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/permutations-ii/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_permutations-ii" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_permutations-ii" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(5).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><p>你对比一下之前的标准全排列解法代码，这段解法代码只有两处不同：</p><p>1、对 <code>nums</code> 进行了排序。</p><p>2、添加了一句额外的剪枝逻辑。</p><p>类比输入包含重复元素的子集/组合问题，你大概应该理解这么做是为了防止出现重复结果。</p><p>但是注意排列问题的剪枝逻辑，和子集/组合问题的剪枝逻辑略有不同：新增了 <code>!used[i - 1]</code> 的逻辑判断。</p><p>这个地方理解起来就需要一些技巧性了，且听我慢慢到来。为了方便研究，依然把相同的元素用上标 <code>'</code> 以示区别。</p><p>假设输入为 <code>nums = [1,2,2']</code>，标准的全排列算法会得出如下答案：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span>[</span></span>
<span class="line"><span>    [1,2,2'],[1,2',2],</span></span>
<span class="line"><span>    [2,1,2'],[2,2',1],</span></span>
<span class="line"><span>    [2',1,2],[2',2,1]</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，这个结果存在重复，比如 <code>[1,2,2']</code> 和 <code>[1,2',2]</code> 应该只被算作同一个排列，但被算作了两个不同的排列。</p><p>所以现在的关键在于，如何设计剪枝逻辑，把这种重复去除掉？</p><p><strong>答案是，保证相同元素在排列中的相对位置保持不变</strong>。</p><p>比如说 <code>nums = [1,2,2']</code> 这个例子，我保持排列中 <code>2</code> 一直在 <code>2'</code> 前面。</p><p>这样的话，你从上面 6 个排列中只能挑出 3 个排列符合这个条件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span>[ [1,2,2'],[2,1,2'],[2,2',1] ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div><p>这也就是正确答案。</p><p>进一步，如果 <code>nums = [1,2,2',2'']</code>，我只要保证重复元素 <code>2</code> 的相对位置固定，比如说 <code>2 -&gt; 2' -&gt; 2''</code>，也可以得到无重复的全排列结果。</p><p>仔细思考，应该很容易明白其中的原理：</p><p><strong>标准全排列算法之所以出现重复，是因为把相同元素形成的排列序列视为不同的序列，但实际上它们应该是相同的；而如果固定相同元素形成的序列顺序，当然就避免了重复</strong>。</p><p>那么反映到代码上，你注意看这个剪枝逻辑：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !used[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 如果前面的相邻相等元素没有用过，则跳过</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 选择 nums[i]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当出现重复元素时，比如输入 <code>nums = [1,2,2',2'']</code>，<code>2'</code> 只有在 <code>2</code> 已经被使用的情况下才会被选择，同理，<code>2''</code> 只有在 <code>2'</code> 已经被使用的情况下才会被选择，这就保证了相同元素在排列中的相对位置保证固定</strong>。</p><p>这里拓展一下，如果你把上述剪枝逻辑中的 <code>!used[i - 1]</code> 改成 <code>used[i - 1]</code>，其实也可以通过所有测试用例，但效率会有所下降，这是为什么呢？</p><p>之所以这样修改不会产生错误，是因为这种写法相当于维护了 <code>2'' -&gt; 2' -&gt; 2</code> 的相对顺序，最终也可以实现去重的效果。</p><p>但为什么这样写效率会下降呢？因为这个写法剪掉的树枝不够多。</p><p>比如输入 <code>nums = [2,2',2'']</code>，产生的回溯树如下：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/12.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>如果用绿色树枝代表 <code>backtrack</code> 函数遍历过的路径，红色树枝代表剪枝逻辑的触发，那么 <code>!used[i - 1]</code> 这种剪枝逻辑得到的回溯树长这样：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/13.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>而 <code>used[i - 1]</code> 这种剪枝逻辑得到的回溯树如下：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/14.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>可以看到，<code>!used[i - 1]</code> 这种剪枝逻辑剪得干净利落，而 <code>used[i - 1]</code> 这种剪枝逻辑虽然也能得到无重结果，但它剪掉的树枝较少，存在的无效计算较多，所以效率会差一些。</p><p>你可以使用可视化面板的「编辑」按钮自行修改代码验证一下，看看两种写法产生的回溯树有何差别：</p><visual category="leetcode" emoji="🍭" lang="&quot;zh&quot;" slug="permutations-ii" id="id-permutations-ii-2" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/permutations-ii/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_permutations-ii" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_permutations-ii" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(6).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><p>当然，关于排列去重，也有读者提出别的剪枝思路：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-545-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-545-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-545-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-545-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-545-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-545-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt; track) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录之前树枝上元素的值</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 题目说 -10 &lt;= nums[i] &lt;= 10，所以初始化为特殊值</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = -</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">666</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 排除不合法的选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (used[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (nums[i] == prevNum) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 记录这条树枝上的值</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        prevNum = nums[i];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, track);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-545-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">list</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录之前树枝上元素的值</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 题目说 -10 &lt;= nums[i] &lt;= 10，所以初始化为特殊值</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> prevNum = -</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">666</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 排除不合法的选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] == prevNum) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 记录这条树枝上的值</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        prevNum = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, track);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-545-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: LinkedList[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]):</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums):</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        res.append(track[:])</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 记录之前树枝上元素的值</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 题目说 -10 &lt;= nums[i] &lt;= 10，所以初始化为特殊值</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    prevNum = -</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">666</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 排除不合法的选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> used[i]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> nums[i] == prevNum:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">True</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录这条树枝上的值</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        prevNum = nums[i]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, track)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-545-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录之前树枝上元素的值</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 题目说 -10 &lt;= nums[i] &lt;= 10，所以初始化为特殊值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := -</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">666</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 排除不合法的选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 记录这条树枝上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-545-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录之前树枝上元素的值</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 题目说 -10 &lt;= nums[i] &lt;= 10，所以初始化为特殊值</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = -</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">666</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 排除不合法的选择</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 记录这条树枝上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        prevNum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>这个思路也是对的，设想一个节点出现了相同的树枝：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/11.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>如果不作处理，这些相同树枝下面的子树也会长得一模一样，所以会出现重复的排列。</p><p>因为排序之后所有相等的元素都挨在一起，所以只要用 <code>prevNum</code> 记录前一条树枝的值，就可以避免遍历值相同的树枝，从而避免产生相同的子树，最终避免出现重复的排列。</p><p>好了，这样包含重复输入的排列问题也解决了。</p><h2 id="子集-组合-元素无重可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E5%AD%90%E9%9B%86-%E7%BB%84%E5%90%88-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>子集/组合（元素无重可复选）</span></a></h2><p>终于到了最后一种类型了：输入数组无重复元素，但每个元素可以被无限次使用。</p><p>直接看力扣第 39 题「<a href="https://leetcode.cn/problems/combination-sum/" class="" target="_blank" rel="noopener noreferrer">组合总和</a>」：</p><p>给你一个无重复元素的整数数组 <code>candidates</code> 和一个目标和 <code>target</code>，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的所有组合。<code>candidates</code> 中的每个数字可以无限制重复被选取。</p><p>函数签名如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-590-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-590-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-590-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-590-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-590-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-590-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;Integer&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] candidates, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> target)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-590-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-590-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-590-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-590-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div></div></div><p>比如输入 <code>candidates = [1,2,3], target = 3</code>，算法应该返回：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span>[ [1,1,1],[1,2],[3] ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div></div></div><p>这道题说是组合问题，实际上也是子集问题：<code>candidates</code> 的哪些子集的和为 <code>target</code>？</p><p>想解决这种类型的问题，也得回到回溯树上，<strong>我们不妨先思考思考，标准的子集/组合问题是如何保证不重复使用元素的</strong>？</p><p>答案在于 <code>backtrack</code> 递归时输入的参数 <code>start</code>：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-620-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-620-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-620-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-620-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-620-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-620-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 无重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> start) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-620-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 无重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-620-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 无重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-620-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 无重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-620-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 无重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>这个 <code>i</code> 从 <code>start</code> 开始，那么下一层回溯树就是从 <code>start + 1</code> 开始，从而保证 <code>nums[start]</code> 这个元素不会被重复使用：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/1.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>那么反过来，如果我想让每个元素被重复使用，我只要把 <code>i + 1</code> 改成 <code>i</code> 即可：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-644-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-644-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-644-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-644-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-644-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-644-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 可重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> start) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-644-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 可重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-644-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 可重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, i)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-644-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 可重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-644-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 可重组合的回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 递归遍历下一层回溯树，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // ...</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>这相当于给之前的回溯树添加了一条树枝，在遍历这棵树的过程中，一个元素可以被无限次使用：</p><div class="img-content"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/10.jpeg" alt="" class="myimage" loading="lazy" photo-swipe=""></div><p>当然，这样这棵回溯树会永远生长下去，所以我们的递归函数需要设置合适的 base case 以结束算法，即路径和大于 <code>target</code> 时就没必要再遍历下去了。</p><p>这道题的解法代码如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-671-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-671-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-671-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-671-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-671-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-671-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的路径和</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> == </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(candidates, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，找到目标和，记录结果</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (trackSum == target) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，停止向下遍历</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (trackSum &gt; target) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum += nums[i];</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i, target);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 同一元素可重复使用，注意参数</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum -= nums[i];</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-671-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    deque&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的路径和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> trackSum = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(candidates, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，找到目标和，记录结果</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (trackSum == target) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，停止向下遍历</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (trackSum &gt; target) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum += </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i];</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 同一元素可重复使用，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i, target);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">            trackSum -= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i];</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-671-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 记录 track 中的路径和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(candidates) == </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(candidates, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, target)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case，找到目标和，记录结果</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum == target:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">list</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track))</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case，超过目标和，停止向下遍历</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum &gt; target:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum += nums[i]</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 同一元素可重复使用，注意参数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums, i, target)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 撤销选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.trackSum -= nums[i]</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-671-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的路径和</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> backtrack</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> func</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，找到目标和，记录结果</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，停止向下遍历</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> += </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 同一元素可重复使用，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> -= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-671-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> combinationSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录结果</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录回溯的路径</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 记录 track 中的路径和</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法主函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    function</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，找到目标和，记录结果</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，超过目标和，停止向下遍历</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">target</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> += </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 递归遍历下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 同一元素可重复使用，注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 撤销选择 nums[i]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            trackSum</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> -= </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">];</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">candidates</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><visual category="leetcode" emoji="🌈" lang="&quot;zh&quot;" slug="combination-sum" id="id-combination-sum" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/leetcode/combination-sum/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_combination-sum" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_combination-sum" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(7).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><h2 id="排列-元素无重可复选" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%8E%92%E5%88%97-%E5%85%83%E7%B4%A0%E6%97%A0%E9%87%8D%E5%8F%AF%E5%A4%8D%E9%80%89" class="router-link-active router-link-exact-active header-anchor"><span>排列（元素无重可复选）</span></a></h2><p>力扣上没有题目直接考察这个场景，我们不妨先想一下，<code>nums</code> 数组中的元素无重复且可复选的情况下，会有哪些排列？</p><p>比如输入 <code>nums = [1,2,3]</code>，那么这种条件下的全排列共有 3^3 = 27 种：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">  [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">  [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">  [</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">2</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">],[</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">,</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">3</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>标准的全排列算法利用 <code>used</code> 数组进行剪枝，避免重复使用同一个元素。如果允许重复使用元素的话，直接放飞自我，去除所有 <code>used</code> 数组的剪枝逻辑就行了</strong>。</p><p>那这个问题就简单了，代码如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-706-0" aria-selected="false">java</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-706-1" aria-selected="false">cpp</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-706-2" aria-selected="true">python</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-706-3" aria-selected="false">go</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-706-4" aria-selected="false">javascript</button></div><div class="vp-code-tab" id="codetab-706-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    public</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">List</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">Integer</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permuteRepeat</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">new</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> LinkedList</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(track));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-706-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">public:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    vector&lt;vector&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    deque&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt; track;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">    vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;&gt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">permuteRepeat</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> res;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">() == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">()));</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">            backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">            track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-706-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">class</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> Solution</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> __init__</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res = []</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track = []</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteRepeat</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; List[List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]]:</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">        self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) -&gt; </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">None</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">:</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.res.append(</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track[:])</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 做选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">            # 取消选择</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">            self</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.track.pop()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-706-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteRepeat</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> [][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, &amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> *[][]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) == </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">make</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([]</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">))</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        copy</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        *</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(*</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">tmp</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-706-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> permuteRepeat</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">    let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = [];</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    </span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">    backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    return</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 回溯算法核心函数</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // base case，到达叶子节点</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 收集叶子节点上的值</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">([...</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        return</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">let</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 进入下一层回溯树</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">res</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 取消选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><visual category="tutorial" emoji="🌟" lang="&quot;zh&quot;" slug="permutation-repeated" id="id-permutation-repeated" data-v-app=""><div class="viz-template"><div></div><div data-v-ee1a9bd0=""><a data-v-ee1a9bd0="" href="https://labuladong.online/algo-visualize/tutorial/permutation-repeated/" style="display: none;"> Algorithm visualize </a><details data-v-ee1a9bd0="" id="div_permutation-repeated" class="hint-container details" open=""><summary data-v-ee1a9bd0="" style="font-size: large;"><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z" opacity="0.3"></path><path data-v-ee1a9bd0="" fill="currentColor" d="m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z"></path></svg> &nbsp; <strong data-v-ee1a9bd0="">算法可视化面板</strong><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="0.9em" height="0.9em" viewBox="0 0 24 24" style="margin-left: auto; margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" style="margin-right: 10px;"><path data-v-ee1a9bd0="" fill="currentColor" d="M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z"></path></svg><svg data-v-ee1a9bd0="" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path data-v-ee1a9bd0="" fill="currentColor" d="M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z"></path></svg><span data-v-ee1a9bd0="" class="copy-feedback" style="display: none;">Link copied!</span></summary><div data-v-ee1a9bd0="" class="resizable" style="height: 70vh;"><iframe data-v-ee1a9bd0="" title="algo-visualize panel" allow="clipboard-write; fullscreen;" id="iframe_permutation-repeated" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/saved_resource(8).html" width="100%" height="100%" loading="lazy" scrolling="auto" frameborder="0" style="overflow: auto;"></iframe></div></details></div></div></visual><p>至此，排列/组合/子集问题的九种变化就都讲完了。</p><h2 id="最后总结" tabindex="-1"><a aria-current="page" href="https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/#%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93" class="router-link-active router-link-exact-active header-anchor"><span>最后总结</span></a></h2><p>来回顾一下排列/组合/子集问题的三种形式在代码上的区别。</p><p>由于子集问题和组合问题本质上是一样的，无非就是 base case 有一些区别，所以把这两个问题放在一起看。</p><p><strong>形式一、元素无重不可复选，即 <code>nums</code> 中的元素都是唯一的，每个元素最多只能被使用一次</strong>，<code>backtrack</code> 核心代码如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-740-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-740-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-740-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-740-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-740-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-740-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> start) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (used[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-740-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-740-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 注意参数</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]):</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> used[i]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">True</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-740-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架 </span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架 </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数 </span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">+</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择 </span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑 </span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择 </span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择 </span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-740-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p><strong>形式二、元素可重不可复选，即 <code>nums</code> 中的元素可以存在重复，每个元素最多只能被使用一次</strong>，其关键在于排序和剪枝，<code>backtrack</code> 核心代码如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-760-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-760-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-760-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-760-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-760-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-760-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">Arrays</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> start) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，跳过值相同的相邻树枝</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; start &amp;&amp; nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">Arrays</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (used[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !used[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-760-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，跳过值相同的相邻树枝</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; start &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">begin</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(), </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">end</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">());</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">bool</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, used);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-760-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">nums.sort()</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 剪枝逻辑，跳过值相同的相邻树枝</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i &gt; start </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">and</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 注意参数</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, i + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">nums.sort()</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]):</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> used[i]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> and</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> nums[i] == nums[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">and</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;"> not</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> used[i - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]:</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">True</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        used[i] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-760-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">Ints</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，跳过值相同的相邻树枝</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">+</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">Ints</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] == </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-760-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">((</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，跳过值相同的相邻树枝</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> + </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">sort</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">((</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">=&gt;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> a</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">b</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 剪枝逻辑，固定相同的元素在排列中的相对位置</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">        if</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &gt; </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &amp;&amp; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] === </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] &amp;&amp; !</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> - </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">            continue</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        }</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">true</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        used</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">] = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">false</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p><strong>形式三、元素无重可复选，即 <code>nums</code> 中的元素都是唯一的，每个元素可以被使用若干次</strong>，只要删掉去重逻辑即可，<code>backtrack</code> 核心代码如下：</p><div class="vp-code-tabs"><div class="vp-code-tabs-nav" role="tablist"><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-780-0" aria-selected="false">java 🟢</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-780-1" aria-selected="false">cpp 🤖</button><button type="button" class="vp-code-tab-nav active" role="tab" aria-controls="codetab-780-2" aria-selected="true">python 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-780-3" aria-selected="false">go 🤖</button><button type="button" class="vp-code-tab-nav" role="tab" aria-controls="codetab-780-4" aria-selected="false">javascript 🤖</button></div><div class="vp-code-tab" id="codetab-780-0" role="tabpanel" aria-expanded="true" aria-hidden="false"><div class="vp-code-tab-title">java 🟢</div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> start) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[] nums) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">addLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums[i]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">removeLast</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-780-1" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">cpp 🤖</div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">deque</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = start; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, i, track);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">void</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">vector</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">deque</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&lt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">&gt;</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">&amp;</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; i &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">size</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(); i++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">push_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[i]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums, track);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop_back</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab active" id="codetab-780-2" role="tabpanel" aria-expanded="false" aria-hidden="true"><div class="vp-code-tab-title">python 🤖</div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">], </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: </span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    # 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(start, </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 注意参数</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums, i)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;"># 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">def</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">: List[</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]):</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> i </span><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">in</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> range</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(nums)):</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 做选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.append(nums[i])</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        backtrack(nums)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        # 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">        track.pop()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-780-3" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">go 🤖</div><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;"> int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">func</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> []</span><span style="--shiki-light: #267F99; --shiki-dark: #4EC9B0;">int</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> := </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">); </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++ {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">append</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">])</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[:</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">len</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">)-</span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">1</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="vp-code-tab" id="codetab-780-4" role="tabpanel" aria-expanded="false" aria-hidden="false"><div class="vp-code-tab-title">javascript 🤖</div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light: #000000; --shiki-dark: #D4D4D4; --shiki-light-bg: #FFFFFF; --shiki-dark-bg: #1E1E1E;"><button type="button" class="vp-copy-code-button" aria-label="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 组合/子集问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 回溯算法标准框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">start</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 注意参数</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">, </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">// 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;"> backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">function</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">    // 排列问题回溯算法框架</span></span>
<span class="line"><span style="--shiki-light: #AF00DB; --shiki-dark: #C586C0;">    for</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> (</span><span style="--shiki-light: #0000FF; --shiki-dark: #569CD6;">var</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;"> i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> = </span><span style="--shiki-light: #098658; --shiki-dark: #B5CEA8;">0</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;"> &lt; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">length</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">; </span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">++) {</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 做选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">add</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">[</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">i</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">        backtrack</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">(</span><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">nums</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light: #008000; --shiki-dark: #6A9955;">        // 撤销选择</span></span>
<span class="line"><span style="--shiki-light: #001080; --shiki-dark: #9CDCFE;">        track</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">.</span><span style="--shiki-light: #795E26; --shiki-dark: #DCDCAA;">pop</span><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light: #000000; --shiki-dark: #D4D4D4;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset: line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>只要从树的角度思考，这些问题看似复杂多变，实则改改 base case 就能解决，这也是为什么我在 <a href="https://labuladong.online/algo/essential-technique/algorithm-summary/" class="route-link"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>学习算法和数据结构的框架思维</a> 和 <a href="https://labuladong.online/algo/essential-technique/binary-tree-summary/" class="route-link"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-flag"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>手把手刷二叉树（纲领篇）</a> 中强调树类型题目重要性的原因。</p><p>如果你能够看到这里，真得给你鼓掌，相信你以后遇到各种乱七八糟的算法题，也能一眼看透它们的本质，以不变应万变。另外，考虑到篇幅，本文并没有对这些算法进行复杂度的分析，你可以使用我在 <a href="https://labuladong.online/algo/essential-technique/complexity-analysis/" class="route-link"><iconify-icon class="font-icon icon" mode="style" inline="true" width="0.7em" height="0.7em" icon="ic:twotone-menu-book"><template shadowrootmode="open"><style data-style="data-style">:host{display:inline-block;vertical-align:-0.125em}span,svg{display:block;margin:auto}</style></template></iconify-icon>算法时空复杂度分析实用指南</a> 讲到的复杂度分析方法尝试自己分析它们的复杂度。</p><hr><details class="hint-container details" open=""><summary><strong>引用本文的题目</strong></summary><p><strong>安装 <a href="https://labuladong.online/algo/intro/chrome/" class="" target="_blank" rel="noopener noreferrer">我的 Chrome 刷题插件</a> 点开下列题目可直接查看解题思路：</strong></p><table><thead><tr><th style="text-align: center;">LeetCode</th><th style="text-align: center;">力扣</th><th style="text-align: center;">难度</th></tr></thead><tbody><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/letter-tile-possibilities/?show=1" class="" target="_blank" rel="noopener noreferrer">1079. Letter Tile Possibilities</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/letter-tile-possibilities/?show=1" class="" target="_blank" rel="noopener noreferrer">1079. 活字印刷</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/palindrome-partitioning/?show=1" class="" target="_blank" rel="noopener noreferrer">131. Palindrome Partitioning</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/palindrome-partitioning/?show=1" class="" target="_blank" rel="noopener noreferrer">131. 分割回文串</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/?show=1" class="" target="_blank" rel="noopener noreferrer">17. Letter Combinations of a Phone Number</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/?show=1" class="" target="_blank" rel="noopener noreferrer">17. 电话号码的字母组合</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/factor-combinations/?show=1" class="" target="_blank" rel="noopener noreferrer">254. Factor Combinations</a>🔒</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/factor-combinations/?show=1" class="" target="_blank" rel="noopener noreferrer">254. 因子的组合</a>🔒</td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/palindrome-permutation-ii/?show=1" class="" target="_blank" rel="noopener noreferrer">267. Palindrome Permutation II</a>🔒</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/palindrome-permutation-ii/?show=1" class="" target="_blank" rel="noopener noreferrer">267. 回文排列 II</a>🔒</td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/largest-divisible-subset/?show=1" class="" target="_blank" rel="noopener noreferrer">368. Largest Divisible Subset</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/largest-divisible-subset/?show=1" class="" target="_blank" rel="noopener noreferrer">368. 最大整除子集</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/non-decreasing-subsequences/?show=1" class="" target="_blank" rel="noopener noreferrer">491. Non-decreasing Subsequences</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/non-decreasing-subsequences/?show=1" class="" target="_blank" rel="noopener noreferrer">491. 递增子序列</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/shopping-offers/?show=1" class="" target="_blank" rel="noopener noreferrer">638. Shopping Offers</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/shopping-offers/?show=1" class="" target="_blank" rel="noopener noreferrer">638. 大礼包</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/numbers-with-same-consecutive-differences/?show=1" class="" target="_blank" rel="noopener noreferrer">967. Numbers With Same Consecutive Differences</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/numbers-with-same-consecutive-differences/?show=1" class="" target="_blank" rel="noopener noreferrer">967. 连续差相同的数字</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;"><a href="https://leetcode.com/problems/number-of-squareful-arrays/?show=1" class="" target="_blank" rel="noopener noreferrer">996. Number of Squareful Arrays</a></td><td style="text-align: center;"><a href="https://leetcode.cn/problems/number-of-squareful-arrays/?show=1" class="" target="_blank" rel="noopener noreferrer">996. 正方形数组的数目</a></td><td style="text-align: center;">🔴</td></tr><tr><td style="text-align: center;">-</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/?show=1" class="" target="_blank" rel="noopener noreferrer">剑指 Offer 38. 字符串的排列</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;">-</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/TVdhkn/?show=1" class="" target="_blank" rel="noopener noreferrer">剑指 Offer II 079. 所有子集</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;">-</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/uUsW3B/?show=1" class="" target="_blank" rel="noopener noreferrer">剑指 Offer II 080. 含有 k 个元素的组合</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;">-</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/Ygoe9J/?show=1" class="" target="_blank" rel="noopener noreferrer">剑指 Offer II 081. 允许重复选择元素的组合</a></td><td style="text-align: center;">🟠</td></tr><tr><td style="text-align: center;">-</td><td style="text-align: center;"><a href="https://leetcode.cn/problems/VvJkup/?show=1" class="" target="_blank" rel="noopener noreferrer">剑指 Offer II 083. 没有重复元素集合的全排列</a></td><td style="text-align: center;">🟠</td></tr></tbody></table></details><hr></body></div></div></div></div><!----><!----><!----></div><footer class="vp-page-meta"><!----><div class="vp-meta-item git-info"><div class="update-time"><span class="vp-meta-label">最近更新：</span><time class="vp-meta-info" datetime="2025-08-24T06:51:33.460Z" data-allow-mismatch="">2025/8/24 14:51</time></div><!----></div></footer><nav class="vp-page-nav"><a class="route-link auto-link prev" href="https://labuladong.online/algo/essential-technique/bfs-framework/" aria-label="BFS 算法解题套路框架"><div class="hint"><span class="arrow start"></span>上一页</div><div class="link"><!---->BFS 算法解题套路框架</div></a><a class="route-link auto-link next" href="https://labuladong.online/algo/essential-technique/greedy/" aria-label="贪心算法解题套路框架"><div class="hint">下一页<span class="arrow end"></span></div><div class="link">贪心算法解题套路框架<!----></div></a></nav><!----><!--[--><div style="justify-content:center;display:flex;" data-v-11f2a8aa=""><div class="artalkCommentsContainer" data-v-11f2a8aa=""><div id="artalkComments" style="" data-v-11f2a8aa="" class="artalk"><div class="atk-main-editor">
  <div class="atk-header" style="display: none">
    <input name="nick" class="atk-nick" type="text" placeholder="昵称">
    <input name="email" class="atk-email" type="text" placeholder="邮箱">
    <input name="link" class="atk-link" type="text" placeholder="网址">
  </div>
  <div class="atk-textarea-wrap">
    <textarea class="atk-textarea" placeholder="请输入内容，支持 markdown 语法"></textarea>
  </div>
  <div class="atk-plug-panel-wrap" style="display: none;"><div class="atk-editor-plug-preview" style="display: none;"></div></div>
  <div class="atk-bottom">
    <div class="atk-item atk-plug-btn-wrap"><span class="atk-plug-btn">预览 <i title="Markdown is supported"><svg class="markdown" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z"></path></svg></i></span></div>
    <div class="atk-item">
      <button type="button" class="atk-send-btn">提交</button>
    </div>
  </div>
  <div class="atk-notify-wrap"></div>
</div><div class="atk-list">
  <div class="atk-list-header">
    <div class="atk-comment-count atk-dropdown-wrap">
      <div class="atk-text"><span class="atk-comment-count-num">127</span> 条评论</div>
    <span class="atk-arrow-down-icon"></span><ul class="atk-dropdown atk-fade-in"><li class="atk-dropdown-item active"><span>最热</span></li><li class="atk-dropdown-item"><span>最新</span></li><li class="atk-dropdown-item"><span>最早</span></li><li class="atk-dropdown-item"><span>作者</span></li></ul></div>
    <div class="atk-right-action">
      <span data-action="admin-close-comment" class="atk-hide" atk-only-admin-show="">关闭评论</span>
      <span data-action="open-sidebar" class="atk-on">
        <span class="atk-unread-badge" style="display: none;"></span>
        <div class="atk-text">通知中心</div>
      </span>
    </div>
  </div>
  <div class="atk-list-body">
    <div class="atk-list-comments-wrap"><div class="atk-comment-wrap" id="atk-comment-7391">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/3371714"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">zhangjh</span>
        <span class="atk-badge-wrap"><span class="atk-pinned-badge">置顶</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1710405799000">2024-03-14</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>我学的回溯的方法是这样的：</p>
<pre rel="java"><code class="hljs language-java"><span style="color: #23AC69">private</span> <span style="color: #91C132">void</span> <span style="color: #F19726">backtrack</span>(<span style="color: #E8552D">int</span>[] <span style="color: #1AAB8E">nums</span>, <span style="color: #E8552D">int</span> <span style="color: #2980C1">len</span>, <span style="color: #E8552D">int</span> <span style="color: #9FA0A0">idx</span>) {
       <span style="color: slategray"> // 递归结束条件，候选元素已经遍历完数组</span>
        <span style="color: #F19726">if</span>(<span style="color: #2980C1">len</span> == <span style="color: #9FA0A0">idx</span>) {
            <span style="color: #A3338B">result</span>.<span style="color: #23AC69">add</span>(<span style="color: #91C132">new</span> <span style="color: #F19726">ArrayList</span>&lt;&gt;(<span style="color: #E8552D">track</span>));
            <span style="color: #1AAB8E">return</span>;
        }
       <span style="color: slategray"> // 递归分叉：当前值不加入集合+当前值加入集合</span>
        <span style="color: #F19726">backtrack</span>(<span style="color: #1AAB8E">nums</span>, <span style="color: #2980C1">len</span>, <span style="color: #9FA0A0">idx</span> + <span style="color: #F19726">1</span>);
        <span style="color: #E8552D">track</span>.<span style="color: #23AC69">add</span>(<span style="color: #1AAB8E">nums</span>[<span style="color: #9FA0A0">idx</span>]);
        <span style="color: #F19726">backtrack</span>(<span style="color: #1AAB8E">nums</span>, <span style="color: #2980C1">len</span>,<span style="color: #9FA0A0">idx</span> + <span style="color: #F19726">1</span>);
       <span style="color: slategray"> // 回溯</span>
        <span style="color: #E8552D">track</span>.<span style="color: #1BA1E6">remove</span>(<span style="color: #E8552D">track</span>.<span style="color: #F19726">size</span>() - <span style="color: #F19726">1</span>);
    }</code>
</pre><p>我感觉这个更好理解一点，文中模板中的for循环，然后里面又是再次递归，我看了有点晕</p>
<div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">取消置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children atk-height-limit" style="height: 400px; overflow: hidden;"><div class="atk-comment-wrap" id="atk-comment-7640">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(1)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">labuladong</span>
        <span class="atk-badge-wrap"><span class="atk-badge" style="background-color: rgb(0, 131, 255);">东哥</span></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">zhangjh</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1710766672000">2024-03-18</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>你这个解法是针对子集/组合问题的。</p>
<p>回溯算法的本质是球盒模型，两种思维模式：球的视角、盒的视角。</p>
<p>你的解法是站在球的视角，每个球只有两种选择：装进盒子或不装进盒子。</p>
<p>我的解法是站在盒的视角，盒子的第一位可以有 N 种选择，第二位有 N - 1 种选择，以此类推。</p>
<p>两种思维模式你都明白，做到变换自如，才能秒杀回溯算法的题目。两种思维模式的详细对比参见我的下篇文章 <a href="https://labuladong.online/algo/practice-in-action/two-views-of-backtrack/">球盒模型：回溯算法穷举的两种视角</a>。</p>
<p>PS：帮你注释一下代码，便于其他读者理解。有 N 个元素，每个都有两种选择，所以这个算法第递归树是一棵高度为 N 的二叉树：</p>
<pre rel="java"><code class="hljs language-java"><span style="color: slategray">// 回溯框架，nums[idx] 元素做选择，是否加入子集</span>
<span style="color: #23AC69">void</span> <span style="color: #91C132">backtrack</span>(<span style="color: #F19726">int</span>[] <span style="color: #E8552D">nums</span>, <span style="color: #F19726">int</span> <span style="color: #E1147F">idx</span>) {
       <span style="color: slategray"> // 递归结束条件，所有元素都已经做完选择</span>
        <span style="color: #2980C1">if</span>(<span style="color: #E8552D">nums</span>.<span style="color: #9FA0A0">length</span> == <span style="color: #E1147F">idx</span>) {
            <span style="color: #E30B20">result</span>.<span style="color: #E30B20">add</span>(<span style="color: #A3338B">new</span> <span style="color: #23AC69">ArrayList</span>&lt;&gt;(<span style="color: #91C132">track</span>));
            <span style="color: #F19726">return</span>;
        }
       <span style="color: slategray"> // 选择 1：当前元素不加入子集/组合</span>
       <span style="color: slategray"> // 做选择（不用做什么，直接增加 idx 去穷举下一个元素）</span>
        <span style="color: #91C132">backtrack</span>(<span style="color: #E8552D">nums</span>, <span style="color: #E1147F">idx</span> + <span style="color: #2980C1">1</span>);
       <span style="color: slategray"> // 撤销选择（不用撤销什么）</span>

       <span style="color: slategray"> // 选择 2：当前元素加入子集/组合</span>
       <span style="color: slategray"> // 做选择，加入子集</span>
        <span style="color: #91C132">track</span>.<span style="color: #E30B20">add</span>(<span style="color: #E8552D">nums</span>[<span style="color: #E1147F">idx</span>]);
        <span style="color: #91C132">backtrack</span>(<span style="color: #E8552D">nums</span>, <span style="color: #E1147F">idx</span> + <span style="color: #2980C1">1</span>);
       <span style="color: slategray"> // 撤销选择，移出子集</span>
        <span style="color: #91C132">track</span>.<span style="color: #E8552D">remove</span>(<span style="color: #91C132">track</span>.<span style="color: #E1147F">size</span>() - <span style="color: #2980C1">1</span>);
    }</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (43)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-16028">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/8936328"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">fineday009</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">labuladong</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1730285433000">2024-10-30</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>真强，理解透彻才能说得这么轻松自如！点赞！</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-height-limit-btn">阅读更多</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3714">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/11874659"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">BIT-zhaoyang</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1647645669000">2022-03-19</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>感谢大佬的文章。大佬的文章最强的地方在于，通过归纳总结框架，高度抽象出来了一类问题。比如要不要重复选，其实就取决于下一次递归是i还是i+1。很好。</p>
<p>关于全排列去重，个人觉得有一个更好理解的方案。按照回溯框架的思想，每次递归的时候遍历可选列表。什么时候会造成答案重复呢？在同一个位置上，同样值的元素被选了多次。比如[2, 2]，如果选了第一个2，下次还选2，就会造成重复。为了避免这个重复，可以在遍历的时候判断一下现在要选的元素是否和上一次选择过的相等。相等就跳过。伪代码如下：</p>
<pre rel="plaintext"><code class="hljs language-plaintext"><span style="color: #23AC69">for</span> (<span style="color: #91C132">int</span> <span style="color: #F19726">i</span> = <span style="color: #E8552D">0</span>, <span style="color: #1AAB8E">last</span> = -<span style="color: #E1147F">1</span>; <span style="color: #F19726">i</span> &lt; <span style="color: #1BA1E6">nums</span>.<span style="color: #9FA0A0">length</span>; ++<span style="color: #F19726">i</span>) {
    <span style="color: #E30B20">if</span> (<span style="color: #1AAB8E">last</span> &gt; -<span style="color: #E1147F">1</span> &amp;&amp; <span style="color: #1BA1E6">nums</span>[<span style="color: #F19726">i</span>] == <span style="color: #1BA1E6">nums</span>[<span style="color: #1AAB8E">last</span>]) <span style="color: #1AAB8E">continue</span>;
    <span style="color: #E30B20">if</span> (<span style="color: #2980C1">visited</span>[<span style="color: #F19726">i</span>])   <span style="color: #1AAB8E">continue</span>;
   <span style="color: slategray"> // make choice</span>
    <span style="color: #1AAB8E">last</span> = <span style="color: #F19726">i</span>;
    <span style="color: #2980C1">visited</span>[<span style="color: #F19726">i</span>] = <span style="color: #23AC69">true</span>;
    <span style="color: #91C132">path</span>.<span style="color: #F19726">add</span>(<span style="color: #1BA1E6">nums</span>[<span style="color: #F19726">i</span>]);
    
   <span style="color: slategray"> // recursive call</span>
    <span style="color: #E1147F">recur</span>(<span style="color: #91C132">path</span>, <span style="color: #1BA1E6">nums</span>);
    
   <span style="color: slategray"> // cancel choice</span>
    <span style="color: #2980C1">visited</span>[<span style="color: #F19726">i</span>] = <span style="color: #E30B20">false</span>;
    <span style="color: #91C132">path</span>.<span style="color: #A3338B">removeLast</span>();
}</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (15)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-3715">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(1)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">labuladong</span>
        <span class="atk-badge-wrap"><span class="atk-badge" style="background-color: rgb(0, 131, 255);">东哥</span></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">BIT-zhaoyang</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1647764243000">2022-03-20</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>@BIT-zhaoyang  这个思路也不错！我稍微改一下，供大家参考：</p>
<pre rel="java"><code class="hljs language-java"><span style="color: #23AC69">void</span> <span style="color: #91C132">backtrack</span>(<span style="color: #F19726">int</span>[] <span style="color: #E8552D">nums</span>, <span style="color: #1AAB8E">LinkedList</span>&lt;<span style="color: #E1147F">Integer</span>&gt; <span style="color: #2980C1">track</span>) {
    <span style="color: #1BA1E6">if</span> (<span style="color: #2980C1">track</span>.<span style="color: #F19726">size</span>() == <span style="color: #E8552D">nums</span>.<span style="color: #E30B20">length</span>) {
        <span style="color: #A3338B">res</span>.<span style="color: #23AC69">add</span>(<span style="color: #91C132">new</span> <span style="color: #1AAB8E">LinkedList</span>(<span style="color: #2980C1">track</span>));
        <span style="color: #1AAB8E">return</span>;
    }

   <span style="color: slategray"> // 记录之前树枝上元素的值</span>
   <span style="color: slategray"> // 题目说 -10 &lt;= nums[i] &lt;= 10，所以初始化为特殊值</span>
    <span style="color: #F19726">int</span> <span style="color: #2980C1">prevNum</span> = -<span style="color: #1BA1E6">666</span>;
    <span style="color: #9FA0A0">for</span> (<span style="color: #F19726">int</span> <span style="color: #E30B20">i</span> = <span style="color: #E30B20">0</span>; <span style="color: #E30B20">i</span> &lt; <span style="color: #E8552D">nums</span>.<span style="color: #E30B20">length</span>; <span style="color: #E30B20">i</span>++) {
       <span style="color: slategray"> // 排除不合法的选择</span>
        <span style="color: #1BA1E6">if</span> (<span style="color: #1AAB8E">used</span>[<span style="color: #E30B20">i</span>]) {
            <span style="color: #2980C1">continue</span>;
        }
        <span style="color: #1BA1E6">if</span> (<span style="color: #E8552D">nums</span>[<span style="color: #E30B20">i</span>] == <span style="color: #2980C1">prevNum</span>) {
            <span style="color: #2980C1">continue</span>;
        }

        <span style="color: #2980C1">track</span>.<span style="color: #23AC69">add</span>(<span style="color: #E8552D">nums</span>[<span style="color: #E30B20">i</span>]);
        <span style="color: #1AAB8E">used</span>[<span style="color: #E30B20">i</span>] = <span style="color: #E1147F">true</span>;
       <span style="color: slategray"> // 记录这条树枝上的值</span>
        <span style="color: #2980C1">prevNum</span> = <span style="color: #E8552D">nums</span>[<span style="color: #E30B20">i</span>];

        <span style="color: #91C132">backtrack</span>(<span style="color: #E8552D">nums</span>, <span style="color: #2980C1">track</span>);

        <span style="color: #2980C1">track</span>.<span style="color: #23AC69">removeLast</span>();
        <span style="color: #1AAB8E">used</span>[<span style="color: #E30B20">i</span>] = <span style="color: #E8552D">false</span>;
    }
}</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (6)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3711">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/68572966"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">Days-Go-By</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1646679162000">2022-03-08</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>强</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (19)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-5586">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/24547457"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">Simplehippo</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">Days-Go-By</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1688544868000">2023-07-05</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>感谢，受益良多。提出一个前两类问题的变体: 例如无重复每元素可用N次，有重复每元素可用N次，某元素可多次使用。这些变体将其考虑展开最终应都可变为有重复每元素仅用一次。</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-9652">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(2)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">不开一枪</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1713522061000">2024-04-19</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>元素可重不复选的全排列问题（全排列2），我有一个比较好的理解思路。解题思路本质上还是将相邻重复子节点的重复部分进行剪枝，如果只判断nums[i]==nums[i-1],那么当前节点有可能是和上一个节点同层的具有相同值节点（需要被剪枝），也有可能是上一个节点的子节点(尽管有相同值，但不应该被剪枝),!(used[i-1])条件就是用来判断他们是否是同一层的，如果上一个节点没有被使用，说明他们处于相同的一层，此时才需要被剪枝。东哥给的第二个读者的解题思路更好理解一些，在for循环外重置prenum，在for循环内设置和比较prenum，那么此时这个prenum只在同一层的节点上进行对比，避免了剪枝剪去父子节点情况。(参照递归树的图来看更好理解这段话)</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (9)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3788">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/1511915"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">hanleilei</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1694994827000">2023-09-18</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>其实，代码中的path/track，全部的都改成stack，一下子更容易理解了呢。</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (4)</span><span class="atk-common-action-btn">反对 (1)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-5847">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(1)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">labuladong</span>
        <span class="atk-badge-wrap"><span class="atk-badge" style="background-color: rgb(0, 131, 255);">东哥</span></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">hanleilei</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1708145497000">2024-02-17</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>可以，变量名随便你。关键是回溯的思想，递归前做选择，递归后撤销选择，这样才能正确维护递归堆栈中的路径。</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (5)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3732">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/62538333"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">davidditao</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1651265650000">2022-04-30</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>对于 排列（元素可重不可复选）的剪枝理解：</p>
<pre rel="java"><code class="hljs language-java"><span style="color: #23AC69">if</span> (<span style="color: #91C132">i</span> &gt; <span style="color: #F19726">0</span> &amp;&amp; <span style="color: #E8552D">nums</span>[<span style="color: #91C132">i</span>] == <span style="color: #E8552D">nums</span>[<span style="color: #91C132">i</span> - <span style="color: #1BA1E6">1</span>] &amp;&amp; !<span style="color: #9FA0A0">used</span>[<span style="color: #91C132">i</span> - <span style="color: #1BA1E6">1</span>]) {
            <span style="color: #E30B20">continue</span>;
        }</code>
</pre><ol>
<li><p>如果use[i-1] == true ：<br>说明 track 里已经有和 nums[i] 相同的元素了，那么 nums[i] 这个元素是可以被选择放进 track 里的。<br>例如：track = [1, 2] , 可以再放进一个 1 变为 [1, 2, 1]。</p>
</li>
<li><p>如果 use[i-1] == false ：<br>说明 track 里还没有和 nums[i] 相同的元素，如果有多个与 nums[i] 相同的元素，我们只需把第一个放进track 里，其他的不用管（剪枝）。 所以只有当 i == 0 ，的时候才需要做 add 操作，i &gt; 0 的时候 continue 。（只选第一个）<br>例如：track = [2] , 外面还有 1 和 1’ ，那么我们只需要放第一个 1 进 track = [2, 1] 。[2, 1’] 的情况是要被剪枝的。</p>
</li>
</ol>
<div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (4)</span><span class="atk-common-action-btn">反对 (2)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-18843">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(3)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">枫</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">davidditao</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1751182815000">2025-06-29</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>你这个理解不错啊,我看了半天愣是没看懂,稍微好理解一些</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-8555">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(4)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">陌离</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1711881919000">2024-03-31</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>子集（元素无重可复选） leetcode 39 组合总和，文中代码缺一个判断条件，不然会有重复子集</p>
<pre rel="python"><code class="hljs language-python"><span style="color: #23AC69">class</span> <span style="color: #91C132">Solution</span>:
    <span style="color: #F19726">def</span> <span style="color: #E8552D">__init__</span>(<span style="color: #1AAB8E">self</span>) -&gt; <span style="color: #E1147F">None</span>:
        <span style="color: #1AAB8E">self</span>.<span style="color: #1BA1E6">res</span> = []
        <span style="color: #1AAB8E">self</span>.<span style="color: #F19726">tarck</span> = []
        <span style="color: #1AAB8E">self</span>.<span style="color: #E30B20">total</span> = <span style="color: #A3338B">0</span>

    <span style="color: #F19726">def</span> <span style="color: #91C132">find_all</span>(<span style="color: #1AAB8E">self</span>, <span style="color: #E8552D">nums</span>: <span style="color: #1AAB8E">List</span>[<span style="color: #E1147F">int</span>], <span style="color: #2980C1">start</span>: <span style="color: #E1147F">int</span>, <span style="color: #9FA0A0">target</span>: <span style="color: #E1147F">int</span>):
        <span style="color: #E30B20">if</span> <span style="color: #1AAB8E">self</span>.<span style="color: #E30B20">total</span> == <span style="color: #9FA0A0">target</span>:
            <span style="color: #1AAB8E">self</span>.<span style="color: #1BA1E6">res</span>.<span style="color: #E8552D">append</span>(<span style="color: #1AAB8E">self</span>.<span style="color: #F19726">tarck</span>[:])
            <span style="color: #2980C1">return</span>

        <span style="color: #E30B20">if</span> <span style="color: #1AAB8E">self</span>.<span style="color: #E30B20">total</span> &gt; <span style="color: #9FA0A0">target</span>:
            <span style="color: #2980C1">return</span>

        <span style="color: #A3338B">for</span> <span style="color: #23AC69">i</span> <span style="color: #91C132">in</span> <span style="color: #F19726">range</span>(<span style="color: #2980C1">start</span>, <span style="color: #1AAB8E">len</span>(<span style="color: #E8552D">nums</span>)):
            # <span style="color: #2980C1">通过大小判断去掉重复的子集</span>，<span style="color: #1BA1E6">比如</span><span style="color: #9FA0A0">2</span>,<span style="color: #F19726">3</span>,<span style="color: #F19726">3</span>、<span style="color: #F19726">3</span>,<span style="color: #9FA0A0">2</span>,<span style="color: #F19726">3</span>
            <span style="color: #E30B20">if</span> <span style="color: #1AAB8E">len</span>(<span style="color: #1AAB8E">self</span>.<span style="color: #F19726">tarck</span>) &gt; <span style="color: #A3338B">0</span> <span style="color: #2980C1">and</span> <span style="color: #E8552D">nums</span>[<span style="color: #23AC69">i</span>] &lt; <span style="color: #1AAB8E">self</span>.<span style="color: #F19726">tarck</span>[-<span style="color: #E30B20">1</span>]:
                <span style="color: #A3338B">continue</span>

            <span style="color: #1AAB8E">self</span>.<span style="color: #F19726">tarck</span>.<span style="color: #E8552D">append</span>(<span style="color: #E8552D">nums</span>[<span style="color: #23AC69">i</span>])
            <span style="color: #1AAB8E">self</span>.<span style="color: #E30B20">total</span> += <span style="color: #E8552D">nums</span>[<span style="color: #23AC69">i</span>]
            <span style="color: #1AAB8E">self</span>.<span style="color: #91C132">find_all</span>(<span style="color: #E8552D">nums</span>, <span style="color: #2980C1">start</span>, <span style="color: #9FA0A0">target</span>)
            <span style="color: #1AAB8E">self</span>.<span style="color: #F19726">tarck</span>.<span style="color: #E8552D">pop</span>()
            <span style="color: #1AAB8E">self</span>.<span style="color: #E30B20">total</span> -= <span style="color: #E8552D">nums</span>[<span style="color: #23AC69">i</span>]

    <span style="color: #F19726">def</span> <span style="color: #F19726">combinationSum</span>(<span style="color: #1AAB8E">self</span>, <span style="color: #E30B20">candidates</span>: <span style="color: #1AAB8E">List</span>[<span style="color: #E1147F">int</span>], <span style="color: #9FA0A0">target</span>: <span style="color: #E1147F">int</span>) -&gt; <span style="color: #1AAB8E">List</span>[<span style="color: #1AAB8E">List</span>[<span style="color: #E1147F">int</span>]]:
        <span style="color: #1AAB8E">self</span>.<span style="color: #91C132">find_all</span>(<span style="color: #9FA0A0">sorted</span>(<span style="color: #E30B20">candidates</span>), <span style="color: #A3338B">0</span>, <span style="color: #9FA0A0">target</span>)
        <span style="color: #2980C1">return</span> <span style="color: #1AAB8E">self</span>.<span style="color: #1BA1E6">res</span></code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (3)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-18107">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(5)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">Mandy</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">陌离</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1744759579000">2025-04-16</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>文章里的写法没错，你给出的代码应该是这一行有问题：<br><code>self.find_all(nums, start, target)</code> </p>
<p>改成<code>self.find_all(nums, i, target)</code> // 应该传<code>i</code>进去</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3758">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/88303850"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">steven-yanh</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1668615675000">2022-11-17</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p><code>90. Subsets II</code><br>语言用Swift时，为什么用一样的思路但是总是多一个答案(剪不掉最后一个枝)<br>res = [[], [1], [1, 2], [1, 2, 2], [2], [2, 2], <code>[2, 2, 2]</code>]<br>code:</p>
<pre rel="sh"><code class="hljs language-sh"><span style="color: #23AC69">class</span> <span style="color: #91C132">Solution</span> {
    <span style="color: #F19726">var</span> <span style="color: #E8552D">track</span> = [<span style="color: #1AAB8E">Int</span>]()
    <span style="color: #F19726">var</span> <span style="color: #2980C1">res</span> = [[<span style="color: #1AAB8E">Int</span>]]()
    <span style="color: #9FA0A0">func</span> <span style="color: #F19726">subsetsWithDup</span>(<span style="color: #E30B20">_</span> <span style="color: #E30B20">nums</span>: [<span style="color: #1AAB8E">Int</span>]) -&gt; [[<span style="color: #1AAB8E">Int</span>]] {
        <span style="color: #91C132">let</span> <span style="color: #F19726">sorted</span> = <span style="color: #E30B20">nums</span>.<span style="color: #F19726">sorted</span>()
        <span style="color: #E1147F">backtrack</span>(<span style="color: #F19726">sorted</span>, <span style="color: #1BA1E6">0</span>)
        <span style="color: #9FA0A0">return</span> <span style="color: #2980C1">res</span>
    }
    <span style="color: #9FA0A0">func</span> <span style="color: #E1147F">backtrack</span>(<span style="color: #E30B20">_</span> <span style="color: #E30B20">nums</span>: [<span style="color: #1AAB8E">Int</span>], <span style="color: #E30B20">_</span> <span style="color: #E8552D">start</span>: <span style="color: #1AAB8E">Int</span>) {
        <span style="color: #2980C1">res</span>.<span style="color: #2980C1">append</span>(<span style="color: #E8552D">track</span>)
        <span style="color: #9FA0A0">for</span> <span style="color: #F19726">i</span> <span style="color: #E30B20">in</span> <span style="color: #E8552D">start</span>..&lt;<span style="color: #E30B20">nums</span>.<span style="color: #23AC69">count</span> {
            <span style="color: #91C132">if</span> <span style="color: #F19726">i</span> &gt; <span style="color: #E8552D">start</span> &amp;&amp; <span style="color: #E30B20">nums</span>[<span style="color: #F19726">i</span>] == <span style="color: #E30B20">nums</span>[<span style="color: #F19726">i</span> - <span style="color: #9FA0A0">1</span>] {
                <span style="color: #F19726">continue</span>
            }
            <span style="color: #E8552D">track</span>.<span style="color: #2980C1">append</span>(<span style="color: #E30B20">nums</span>[<span style="color: #F19726">i</span>])
            <span style="color: #E1147F">backtrack</span>(<span style="color: #E30B20">nums</span>, <span style="color: #E8552D">start</span>+<span style="color: #9FA0A0">1</span>)
            <span style="color: #E8552D">track</span>.<span style="color: #2980C1">removeLast</span>()
        }
    }
}
</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-5591">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/17939214"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">zangxycoding</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">steven-yanh</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1670802314000">2022-12-12</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>递归backtrack里应该是i+1不是start+1</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (3)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3787">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/48433083"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">hanqin5472</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1694664002000">2023-09-14</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>太强了，跟着这篇文章刷题感觉非常nice。刚开始啥也不会，刷了几道题后后面的题几乎就能灵活运用。</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (3)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3766">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/127090366"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">CrazyWangShunJi</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1679511799000">2023-03-23</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>太强了，算法是极致浪漫，而东哥是最浪漫的人之一</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (3)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3735">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/65520836"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">wxler</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1653360929000">2022-05-24</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><p>关于全排列去重，个人有一个不用排序的解决方案，这里直接使用力扣的签名。</p>
<p>力扣题目地址：<a href="https://leetcode.cn/problems/permutations-ii/" rel="noreferrer noopener nofollow">https://leetcode.cn/problems/permutations-ii/</a></p>
<p>代码：</p>
<pre rel="java"><code class="hljs language-java"><span style="color: #23AC69">class</span> <span style="color: #91C132">Solution</span> {
    <span style="color: #F19726">List</span>&lt;<span style="color: #F19726">List</span>&lt;<span style="color: #1AAB8E">Integer</span>&gt;&gt; <span style="color: #E1147F">result</span>=<span style="color: #2980C1">new</span> <span style="color: #1BA1E6">LinkedList</span>&lt;&gt;();
    <span style="color: #9FA0A0">public</span> <span style="color: #F19726">List</span>&lt;<span style="color: #F19726">List</span>&lt;<span style="color: #1AAB8E">Integer</span>&gt;&gt; <span style="color: #A3338B">permuteUnique</span>(<span style="color: #23AC69">int</span>[] <span style="color: #91C132">nums</span>) {
        <span style="color: #F19726">process</span>(<span style="color: #91C132">nums</span>,<span style="color: #2980C1">new</span> <span style="color: #1BA1E6">LinkedList</span>&lt;&gt;(),<span style="color: #2980C1">new</span> <span style="color: #1BA1E6">boolean</span>[<span style="color: #91C132">nums</span>.<span style="color: #F19726">length</span>]);
        <span style="color: #E30B20">return</span> <span style="color: #E1147F">result</span>;
    }

    <span style="color: #9FA0A0">public</span> <span style="color: #23AC69">void</span> <span style="color: #F19726">process</span>(<span style="color: #23AC69">int</span>[] <span style="color: #91C132">nums</span>, <span style="color: #1BA1E6">LinkedList</span>&lt;<span style="color: #1AAB8E">Integer</span>&gt; <span style="color: #2980C1">track</span>,<span style="color: #1BA1E6">boolean</span>[] <span style="color: #9FA0A0">used</span>){
        <span style="color: #F19726">if</span>(<span style="color: #2980C1">track</span>.<span style="color: #E30B20">size</span>()==<span style="color: #91C132">nums</span>.<span style="color: #F19726">length</span>){
            <span style="color: #E1147F">result</span>.<span style="color: #F19726">add</span>(<span style="color: #2980C1">new</span> <span style="color: #1BA1E6">LinkedList</span>&lt;&gt;(<span style="color: #2980C1">track</span>));
            <span style="color: #E30B20">return</span>;
        }

        <span style="color: #1BA1E6">HashSet</span>&lt;<span style="color: #1AAB8E">Integer</span>&gt; <span style="color: #F19726">set</span>=<span style="color: #2980C1">new</span> <span style="color: #1BA1E6">HashSet</span>&lt;&gt;();

        <span style="color: #A3338B">for</span>(<span style="color: #23AC69">int</span> <span style="color: #91C132">i</span>=<span style="color: #F19726">0</span>;<span style="color: #91C132">i</span>&lt;<span style="color: #91C132">nums</span>.<span style="color: #F19726">length</span>;<span style="color: #91C132">i</span>++){
            <span style="color: #F19726">if</span>(<span style="color: #9FA0A0">used</span>[<span style="color: #91C132">i</span>]) <span style="color: #E30B20">continue</span>;
            <span style="color: #F19726">if</span>(<span style="color: #F19726">set</span>.<span style="color: #23AC69">contains</span>(<span style="color: #91C132">nums</span>[<span style="color: #91C132">i</span>])) <span style="color: #E30B20">continue</span>;
            <span style="color: #2980C1">track</span>.<span style="color: #F19726">add</span>(<span style="color: #91C132">nums</span>[<span style="color: #91C132">i</span>]);
            <span style="color: #9FA0A0">used</span>[<span style="color: #91C132">i</span>]=<span style="color: #E30B20">true</span>;
            <span style="color: #F19726">set</span>.<span style="color: #F19726">add</span>(<span style="color: #91C132">nums</span>[<span style="color: #91C132">i</span>]);
            <span style="color: #F19726">process</span>(<span style="color: #91C132">nums</span>,<span style="color: #2980C1">track</span>,<span style="color: #9FA0A0">used</span>);
            <span style="color: #9FA0A0">used</span>[<span style="color: #91C132">i</span>]=<span style="color: #9FA0A0">false</span>;
            <span style="color: #2980C1">track</span>.<span style="color: #E30B20">removeLast</span>();
        }
    }
}</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (3)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-3736">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(1)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">labuladong</span>
        <span class="atk-badge-wrap"><span class="atk-badge" style="background-color: rgb(0, 131, 255);">东哥</span></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">wxler</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1653387499000">2022-05-24</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>@wxler 嗯👍，这是一种很直接的去重方法，不过在递归函数中 new 集合会导致每一层递归中都消耗 O(N) 的空间复杂度，恐怕没有排序的方案效率高</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-5589">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/45024334"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">yiershi</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">wxler</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1682782380000">2023-04-29</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>竟然和我的做法一样。但是这种需要在递归的时候频繁创建和销毁临时 set。神奇的是力扣平台的 Python 代码中，此方式比用全局数组used耗时还少</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3790">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/67228282"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">hello-bluedog</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1705293537000">2024-01-15</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>神！！！</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (2)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3786">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/8786585"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">shiboys</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1694658540000">2023-09-14</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>回溯法确实玩的很溜，总结概括除了新高度！</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (2)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-7169">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(6)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">gitcat</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1710116920000">2024-03-11</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>组合总和 II 的go代码不对，还是java</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (2)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-18787">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(7)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">长风</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1750839201000">2025-06-25</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>太不容易了，给自己鼓鼓掌</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-18788">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(1)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">labuladong</span>
        <span class="atk-badge-wrap"><span class="atk-badge" style="background-color: rgb(0, 131, 255);">东哥</span></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">长风</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1750839248000">2025-06-25</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>鼓掌👏🏻</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-16032">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(8)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">阿飞</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1730302985000">2024-10-30</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><ol start="39">
<li>组合总和，贡献一波其他思路：</li>
</ol>
<pre rel="java"><code class="hljs language-java"><span style="color: #23AC69">class</span> <span style="color: #91C132">Solution</span> {

    <span style="color: #F19726">private</span> <span style="color: #E8552D">List</span>&lt;<span style="color: #E8552D">List</span>&lt;<span style="color: #E1147F">Integer</span>&gt;&gt; <span style="color: #2980C1">res</span> = <span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>&lt;&gt;();

    <span style="color: #F19726">private</span> <span style="color: #9FA0A0">LinkedList</span>&lt;<span style="color: #E1147F">Integer</span>&gt; <span style="color: #A3338B">trace</span> = <span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>&lt;&gt;();

    <span style="color: #F19726">private</span> <span style="color: #E8552D">boolean</span>[] <span style="color: #1AAB8E">used</span>;

    <span style="color: #F19726">private</span> <span style="color: #2980C1">int</span> <span style="color: #1BA1E6">sum</span>;

    <span style="color: #F19726">private</span> <span style="color: #2980C1">int</span> <span style="color: #E30B20">target</span>;

    <span style="color: slategray">/**
        先从最大的开始尝试，一直使用最大的，直到大于 target，然后 backtrace
     */</span>
    <span style="color: #E30B20">public</span> <span style="color: #E8552D">List</span>&lt;<span style="color: #E8552D">List</span>&lt;<span style="color: #E1147F">Integer</span>&gt;&gt; <span style="color: #F19726">combinationSum</span>(<span style="color: #2980C1">int</span>[] <span style="color: #1AAB8E">candidates</span>, <span style="color: #2980C1">int</span> <span style="color: #E30B20">target</span>) {
        <span style="color: #1BA1E6">Arrays</span>.<span style="color: #9FA0A0">sort</span>(<span style="color: #1AAB8E">candidates</span>);
        <span style="color: #E30B20">this</span>.<span style="color: #E30B20">target</span> = <span style="color: #E30B20">target</span>;
        <span style="color: #9FA0A0">LinkedList</span>&lt;<span style="color: #E1147F">Integer</span>&gt; <span style="color: #F19726">newCandidatesList</span> = <span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>&lt;&gt;();
        <span style="color: #E1147F">for</span> (<span style="color: #2980C1">int</span> <span style="color: #1BA1E6">i</span>:<span style="color: #1AAB8E">candidates</span>) {
            <span style="color: #2980C1">int</span> <span style="color: #E30B20">temp</span> = <span style="color: #E30B20">target</span> / <span style="color: #1BA1E6">i</span>;
            <span style="color: #E1147F">for</span> (<span style="color: #2980C1">int</span> <span style="color: #F19726">j</span>=<span style="color: #E8552D">0</span>;<span style="color: #F19726">j</span>&lt;<span style="color: #E30B20">temp</span>;<span style="color: #F19726">j</span>++) {
                <span style="color: #F19726">newCandidatesList</span>.<span style="color: #9FA0A0">add</span>(<span style="color: #1BA1E6">i</span>);
            }
        }
        <span style="color: #2980C1">int</span>[] <span style="color: #E30B20">newCandidates</span> = <span style="color: #1BA1E6">new</span> <span style="color: #2980C1">int</span>[<span style="color: #F19726">newCandidatesList</span>.<span style="color: #F19726">size</span>()];
        <span style="color: #2980C1">int</span> <span style="color: #F19726">j</span>=<span style="color: #E8552D">0</span>;
        <span style="color: #E1147F">for</span> (<span style="color: #2980C1">int</span> <span style="color: #1BA1E6">i</span>:<span style="color: #F19726">newCandidatesList</span>) {
            <span style="color: #E30B20">newCandidates</span>[<span style="color: #F19726">j</span>++] = <span style="color: #1BA1E6">i</span>;
        }
        <span style="color: #23AC69">System</span>.<span style="color: #91C132">out</span>.<span style="color: #F19726">println</span>(<span style="color: #1BA1E6">Arrays</span>.<span style="color: #function toString() { [native code] }">toString</span>(<span style="color: #E30B20">newCandidates</span>));
        <span style="color: #2980C1">backtrace</span>(<span style="color: #E30B20">newCandidates</span>, <span style="color: #E8552D">0</span>);
        <span style="color: #F19726">return</span> <span style="color: #2980C1">res</span>;
    }

    <span style="color: #F19726">private</span> <span style="color: #A3338B">void</span> <span style="color: #2980C1">backtrace</span>(<span style="color: #2980C1">int</span>[] <span style="color: #1AAB8E">candidates</span>, <span style="color: #2980C1">int</span> <span style="color: #1AAB8E">start</span>) {
        <span style="color: #E1147F">if</span> (<span style="color: #1BA1E6">sum</span>==<span style="color: #E30B20">target</span>) {
            <span style="color: #2980C1">res</span>.<span style="color: #9FA0A0">add</span>(<span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>(<span style="color: #A3338B">trace</span>));
           <span style="color: slategray"> // 由于都是大于 0 的，就没有必要继续了</span>
            <span style="color: #F19726">return</span>;
        }

        <span style="color: #E1147F">for</span> (<span style="color: #2980C1">int</span> <span style="color: #1BA1E6">i</span>=<span style="color: #1AAB8E">start</span>;<span style="color: #1BA1E6">i</span>&lt;<span style="color: #1AAB8E">candidates</span>.<span style="color: #1BA1E6">length</span>;<span style="color: #1BA1E6">i</span>++) {
            <span style="color: #2980C1">int</span> <span style="color: #E30B20">curSum</span> = <span style="color: #1BA1E6">sum</span> + <span style="color: #1AAB8E">candidates</span>[<span style="color: #1BA1E6">i</span>];
            <span style="color: #E1147F">if</span> (<span style="color: #E30B20">curSum</span>&gt;<span style="color: #E30B20">target</span>) {
                <span style="color: #F19726">return</span>;
            }

           <span style="color: slategray"> // 去重，每一轮次，选择的元素都不能重复</span>
            <span style="color: #E1147F">if</span> (<span style="color: #1BA1E6">i</span>&gt;<span style="color: #1AAB8E">start</span> &amp;&amp; <span style="color: #1AAB8E">candidates</span>[<span style="color: #1BA1E6">i</span>]==<span style="color: #1AAB8E">candidates</span>[<span style="color: #1BA1E6">i</span>-<span style="color: #A3338B">1</span>]) {
                <span style="color: #23AC69">continue</span>;
            }

           <span style="color: slategray"> // 小于等于</span>
            <span style="color: #1BA1E6">sum</span> = <span style="color: #E30B20">curSum</span>;
            <span style="color: #A3338B">trace</span>.<span style="color: #9FA0A0">add</span>(<span style="color: #1AAB8E">candidates</span>[<span style="color: #1BA1E6">i</span>]);

           <span style="color: slategray"> // 你大爷，这里应该是 i+1, 而不是 start+1</span>
            <span style="color: #2980C1">backtrace</span>(<span style="color: #1AAB8E">candidates</span>, <span style="color: #1BA1E6">i</span>+<span style="color: #A3338B">1</span>);

            <span style="color: #1BA1E6">sum</span> -= <span style="color: #1AAB8E">candidates</span>[<span style="color: #1BA1E6">i</span>];
            <span style="color: #A3338B">trace</span>.<span style="color: #F19726">removeLast</span>();
        }
    }
}</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-16030">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(8)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">阿飞</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1730298263000">2024-10-30</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><ol start="47">
<li>全排列 II，这题我有一个这样的思路，虽然提交结果用时不太理想：<br>4ms<br>击败<br>15.16%</li>
</ol>
<p>但是，感觉也算是一种思路吧：</p>
<pre rel="java"><code class="hljs language-java"><span style="color: #23AC69">class</span> <span style="color: #91C132">Solution</span> {

    <span style="color: #F19726">private</span> <span style="color: #E8552D">List</span>&lt;<span style="color: #E8552D">List</span>&lt;<span style="color: #E1147F">Integer</span>&gt;&gt; <span style="color: #2980C1">res</span> = <span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>&lt;&gt;();

    <span style="color: #F19726">private</span> <span style="color: #9FA0A0">LinkedList</span>&lt;<span style="color: #E1147F">Integer</span>&gt; <span style="color: #A3338B">trace</span> = <span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>&lt;&gt;();

    <span style="color: #F19726">private</span> <span style="color: #E8552D">Map</span>&lt;<span style="color: #E1147F">Integer</span>, <span style="color: #E1147F">Integer</span>&gt; <span style="color: #2980C1">map</span> = <span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">HashMap</span>&lt;&gt;();

    <span style="color: #F19726">private</span> <span style="color: #E30B20">int</span> <span style="color: #E30B20">size</span>;

   <span style="color: slategray"> // 核心应该是：每次只能选剩下的元素中，去重之后，的每个元素选一次</span>
    <span style="color: #A3338B">public</span> <span style="color: #E8552D">List</span>&lt;<span style="color: #E8552D">List</span>&lt;<span style="color: #E1147F">Integer</span>&gt;&gt; <span style="color: #E8552D">permuteUnique</span>(<span style="color: #E30B20">int</span>[] <span style="color: #E1147F">nums</span>) {
        <span style="color: #E30B20">size</span> = <span style="color: #E1147F">nums</span>.<span style="color: #9FA0A0">length</span>;
        <span style="color: #F19726">for</span> (<span style="color: #E30B20">int</span> <span style="color: #E30B20">i</span>:<span style="color: #E1147F">nums</span>) {
            <span style="color: #2980C1">map</span>.<span style="color: #91C132">put</span>(<span style="color: #E30B20">i</span>, <span style="color: #E8552D">1</span>+<span style="color: #2980C1">map</span>.<span style="color: #E1147F">getOrDefault</span>(<span style="color: #E30B20">i</span>, <span style="color: #1BA1E6">0</span>));
        }
        <span style="color: #9FA0A0">backtrace</span>();
        <span style="color: #F19726">return</span> <span style="color: #2980C1">res</span>;
    }

    <span style="color: #F19726">private</span> <span style="color: #A3338B">void</span> <span style="color: #9FA0A0">backtrace</span>() {
        <span style="color: #91C132">if</span> (<span style="color: #A3338B">trace</span>.<span style="color: #E30B20">size</span>()==<span style="color: #E30B20">size</span>) {
            <span style="color: #2980C1">res</span>.<span style="color: #2980C1">add</span>(<span style="color: #1BA1E6">new</span> <span style="color: #9FA0A0">LinkedList</span>(<span style="color: #A3338B">trace</span>));
            <span style="color: #F19726">return</span>;
        }

       <span style="color: slategray"> // 只能选剩下的元素中，去重之后，的每个元素选一次</span>
        <span style="color: #F19726">for</span> (<span style="color: #E30B20">int</span> <span style="color: #23AC69">key</span>:<span style="color: #2980C1">map</span>.<span style="color: #F19726">keySet</span>()) {
            <span style="color: #E30B20">int</span> <span style="color: #1AAB8E">value</span> = <span style="color: #2980C1">map</span>.<span style="color: #2980C1">get</span>(<span style="color: #23AC69">key</span>);
            <span style="color: #91C132">if</span> (<span style="color: #1AAB8E">value</span>==<span style="color: #1BA1E6">0</span>) {
                <span style="color: #E30B20">continue</span>;
            }

            <span style="color: #A3338B">trace</span>.<span style="color: #2980C1">add</span>(<span style="color: #23AC69">key</span>);
            <span style="color: #2980C1">map</span>.<span style="color: #91C132">put</span>(<span style="color: #23AC69">key</span>, <span style="color: #1AAB8E">value</span>-<span style="color: #E8552D">1</span>);

            <span style="color: #9FA0A0">backtrace</span>();

            <span style="color: #A3338B">trace</span>.<span style="color: #F19726">removeLast</span>();
            <span style="color: #2980C1">map</span>.<span style="color: #91C132">put</span>(<span style="color: #23AC69">key</span>, <span style="color: #1AAB8E">value</span>);
        }
    }
}</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3789">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/49915976"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">CZT0</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1701459011000">2023-12-02</span>
      </div>
      <div class="atk-body">
        <div class="atk-content atk-height-limit" style="height: 300px; overflow: hidden;"><ol start="40">
<li>组合总和 II<br>golang代码没有翻译哦，我给一个版本的翻译</li>
</ol>
<pre rel="go"><code class="hljs language-go"><span style="color: #23AC69">import</span> (
    "<span style="color: #91C132">sort</span>"
)

<span style="color: #F19726">func</span> <span style="color: #E8552D">combinationSum2</span>(<span style="color: #1AAB8E">candidates</span> []<span style="color: #E1147F">int</span>, <span style="color: #2980C1">target</span> <span style="color: #E1147F">int</span>) [][]<span style="color: #E1147F">int</span> {
    <span style="color: #F19726">track</span> :=[]<span style="color: #E1147F">int</span>{}
    <span style="color: #E30B20">res</span> := [][]<span style="color: #E1147F">int</span>{}
    <span style="color: #23AC69">var</span> <span style="color: #91C132">sum</span> <span style="color: #E1147F">int</span>
    <span style="color: #91C132">sort</span>.<span style="color: #1AAB8E">Ints</span>(<span style="color: #1AAB8E">candidates</span>)
    <span style="color: #23AC69">var</span> <span style="color: #1BA1E6">backtrack</span> <span style="color: #F19726">func</span>(<span style="color: #E1147F">int</span>)
    <span style="color: #1BA1E6">backtrack</span> =<span style="color: #F19726">func</span>(<span style="color: #A3338B">start</span> <span style="color: #E1147F">int</span>){
        <span style="color: #91C132">if</span> <span style="color: #91C132">sum</span> == <span style="color: #2980C1">target</span> {
            <span style="color: #1AAB8E">temp</span>:=<span style="color: #E1147F">make</span>([]<span style="color: #E1147F">int</span>,<span style="color: #1BA1E6">len</span>(<span style="color: #F19726">track</span>))
            <span style="color: #F19726">copy</span>(<span style="color: #1AAB8E">temp</span>,<span style="color: #F19726">track</span>)
            <span style="color: #E30B20">res</span>=<span style="color: #23AC69">append</span>(<span style="color: #E30B20">res</span>,<span style="color: #1AAB8E">temp</span>)
            <span style="color: #E8552D">return</span>
        }
        <span style="color: #91C132">if</span> (<span style="color: #91C132">sum</span>&gt;<span style="color: #2980C1">target</span>){
            <span style="color: #E8552D">return</span>
        }
        <span style="color: #9FA0A0">for</span> <span style="color: #F19726">i</span>:=<span style="color: #A3338B">start</span>;<span style="color: #F19726">i</span>&lt;<span style="color: #1BA1E6">len</span>(<span style="color: #1AAB8E">candidates</span>);<span style="color: #F19726">i</span>++{
            <span style="color: #91C132">if</span> <span style="color: #F19726">i</span>&gt;<span style="color: #A3338B">start</span> &amp;&amp; <span style="color: #1AAB8E">candidates</span>[<span style="color: #F19726">i</span>]==<span style="color: #1AAB8E">candidates</span>[<span style="color: #F19726">i</span>-<span style="color: #F19726">1</span>]{
                <span style="color: #E30B20">continue</span>
            }

            <span style="color: #F19726">track</span>=<span style="color: #23AC69">append</span>(<span style="color: #F19726">track</span>,<span style="color: #1AAB8E">candidates</span>[<span style="color: #F19726">i</span>])
            <span style="color: #91C132">sum</span>+=<span style="color: #1AAB8E">candidates</span>[<span style="color: #F19726">i</span>]
            <span style="color: #1BA1E6">backtrack</span>(<span style="color: #F19726">i</span>+<span style="color: #F19726">1</span>)
            <span style="color: #F19726">track</span>=<span style="color: #F19726">track</span>[:<span style="color: #1BA1E6">len</span>(<span style="color: #F19726">track</span>)-<span style="color: #F19726">1</span>]
            <span style="color: #91C132">sum</span>-=<span style="color: #1AAB8E">candidates</span>[<span style="color: #F19726">i</span>]
        }
    }
    <span style="color: #1BA1E6">backtrack</span>(<span style="color: #E1147F">0</span>)
    <span style="color: #E8552D">return</span> <span style="color: #E30B20">res</span>
}
</code>
</pre><div class="atk-height-limit-btn">阅读更多</div></div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3778">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/3806834"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">gaifanking</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1687300900000">2023-06-21</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>关于排列有重复元素问题，为什么要使用!used[i-1]，我的一个理解是这样做到了同层剪枝，而父子结构不能剪枝。<br>[1,2,2’] 的一个结果1,2,2’ 不能剪，因为是父子结构；而2,1,2’和2‘,<em>,</em> 后面的一组就可以剪掉了，因为此时同一层，没必要继续。</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3774">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/66213740"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">huanghao7414</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1681867969000">2023-04-19</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>膜拜大佬，另外大佬，子集/组合（元素可重不可复选）中 的leetcode 90题中，剪枝逻辑中我一开始写的是 i&gt;0(应该是i&gt;start)，这里不太理解</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    <div class="atk-comment-children"><div class="atk-comment-wrap" id="atk-comment-18272">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/132(9)"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">TOYS</span>
        <span class="atk-badge-wrap"></span><span class="atk-item atk-reply-at"><span class="atk-arrow"></span><span class="atk-nick">huanghao7414</span></span>
        <span class="atk-item atk-date" data-atk-comment-date="1746185431000">2025-05-02</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>在同一层树的重复元素需要去重,如果大于零的话i=start的时候也会去重,这样会漏解</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (0)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div></div>
  </div>
</div><div class="atk-comment-wrap" id="atk-comment-3773">
  <div class="atk-comment">
    <div class="atk-avatar"><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/120554768"></div>
    <div class="atk-main">
      <div class="atk-header">
        <span class="atk-item atk-nick">KK-Man-42</span>
        <span class="atk-badge-wrap"></span>
        <span class="atk-item atk-date" data-atk-comment-date="1680807739000">2023-04-07</span>
      </div>
      <div class="atk-body">
        <div class="atk-content"><p>排列（元素无重可复选）的.cpp错误</p>
</div>
      </div>
      <div class="atk-footer">
        <div class="atk-actions"><span class="atk-common-action-btn">赞同 (1)</span><span class="atk-common-action-btn">反对 (0)</span><span>回复</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">折叠</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">已审</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">置顶</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">编辑</span><span class="atk-common-action-btn atk-hide" atk-only-admin-show="">删除</span></div>
      </div>
    </div>
  </div>
</div></div><div class="atk-list-read-more" style="">
      <div class="atk-list-read-more-inner">
        <div class="atk-loading-icon" style="display: none;"></div>
        <span class="atk-text" style="">加载更多</span>
      </div>
    </div>
  </div>
  <div class="atk-list-footer">
    <div class="atk-copyright">Powered By <a href="https://artalk.js.org/" target="_blank" title="Artalk v2.7.3">Artalk</a></div>
  </div>
<div class="atk-loading atk-fade-in" style="display: none;">
      <div class="atk-loading-spinner" style="">
        <svg viewBox="25 25 50 50"><circle cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"></circle></svg>
      </div>
    </div></div></div><!----></div></div><!--]--><!--]--></main><!--]--><footer class="vp-footer-wrapper" vp-footer=""><!----><div class="vp-copyright"><p>版权所有，侵权必究 © 2019 - 2025 labuladong</p><p><img src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/beian.png" style="width: 16px" alt=""><a href="https://beian.mps.gov.cn/#/query/webSearch?code=51010602002050" rel="noreferrer" target="_blank">川公网安备51010602002050</a>&nbsp;&nbsp;<a target="_blank" href="https://beian.miit.gov.cn/#/Integrated/index">蜀ICP备2023008303号</a></p></div></footer></div><!--]--><!--[--><button type="button" class="vp-back-to-top-button" aria-label="返回顶部"><span class="vp-scroll-progress" role="progressbar" aria-labelledby="loadinglabel" aria-valuenow="7.347809009281357"><svg><circle cx="26" cy="26" r="24" fill="none" stroke="currentColor" stroke-width="4" stroke-dasharray="11.080234945698818 139.71621242661124"></circle></svg></span><div class="back-to-top-icon"></div></button><button type="button" class="sw-update-popup" tabindex="0">新内容已就绪<span class="icon-wrapper"><svg xmlns="http://www.w3.org/2000/svg" class="icon update-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="update icon"><path d="M949.949 146.25v255.826c0 21.981-13.989 35.97-35.97 35.97H658.154c-13.988 0-25.983-7.992-33.973-21.981-5.997-13.989-4-27.977 7.991-39.97l79.942-77.946c-55.954-51.973-121.918-77.955-199.863-77.955-37.975 0-75.95 8.002-113.924 21.99-37.975 15.985-67.948 37.976-91.934 63.957-25.982 23.987-47.973 53.96-63.957 91.934-29.983 73.955-29.983 153.895 0 227.85 15.984 37.976 37.975 67.947 63.957 91.934 23.986 25.982 53.959 47.973 91.934 63.956 37.974 13.989 75.95 21.991 113.924 21.991 45.967 0 87.942-9.998 127.913-29.982 41.976-17.99 75.951-45.967 101.931-83.943 7.993-4 11.994-5.995 13.989-5.995 5.997 0 9.998 1.994 13.988 5.995l77.958 77.946c3.989 4 5.986 7.993 5.986 11.994 0 1.994-1.996 5.995-3.99 11.994-43.973 51.962-93.941 91.934-151.9 117.914-53.958 25.983-115.92 39.972-185.874 39.972-61.961 0-119.921-11.984-169.89-33.973-57.96-25.985-105.923-57.963-139.896-93.943-35.98-33.972-67.958-81.936-93.94-139.897-45.967-101.93-45.967-237.846 0-339.777 25.982-57.96 57.96-105.923 93.94-139.896 33.973-35.98 81.936-67.958 139.896-93.94 49.968-21.99 107.928-33.974 169.89-33.974 55.963 0 109.923 9.988 161.885 29.973 53.97 21.99 101.933 51.963 139.908 89.938l73.954-73.944c9.987-9.998 23.987-13.988 39.971-8.002 13.988 8.002 21.98 19.995 21.98 33.984z"></path></svg></span></button><!--[--><!--]--><!----><!----><div class="login-window-wrapper fullscreen" style="display: none;"><header class="vp-notice-title"><svg xmlns="http://www.w3.org/2000/svg" class="icon close-icon" viewBox="0 0 1024 1024" fill="currentColor" aria-label="close icon"><path d="m925.468 822.294-303.27-310.288L925.51 201.674c34.683-27.842 38.3-75.802 8.122-107.217-30.135-31.37-82.733-34.259-117.408-6.463L512.001 399.257 207.777 87.993C173.1 60.197 120.504 63.087 90.369 94.456c-30.179 31.415-26.561 79.376 8.122 107.217L401.8 512.005l-303.27 310.29c-34.724 27.82-38.34 75.846-8.117 107.194 30.135 31.437 82.729 34.327 117.408 6.486L512 624.756l304.177 311.22c34.68 27.84 87.272 24.95 117.408-6.487 30.223-31.348 26.56-79.375-8.118-107.195z"></path></svg><span>微信扫码授权用户信息</span></header><div class="vp-notice-content" id="wx_login_container"></div><div class="vp-notice-footer"></div></div><!--]--><!--]--><!--]--></div>
    <script type="module" src="./回溯算法秒杀所有排列_组合_子集问题 _ labuladong 的算法笔记_files/app-CaW5wfAp.js" defer=""></script>
  

<div><div class="ant-notification ant-notification-topRight css-1p3hq3p" style="right: 0px; top: 50px; bottom: auto;"><div></div></div></div><div class="atk-layer-wrap" style="display: none;"><div class="atk-layer-mask"></div></div></body></html>